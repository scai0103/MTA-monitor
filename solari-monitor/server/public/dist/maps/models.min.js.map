{"version":3,"sources":["namespace.js","dynamicItems.js"],"names":["modelsDomain","angular","module","factory","DynamicItems","items","this","loadedPages","numItems","PAGE_SIZE","_items","fetchNumItems_","prototype","getItemAtIndex","index","pageNumber","Math","floor","page","fetchPage_","getLength","pageOffset","i","push","length","reset"],"mappings":"AAAA,IAAAA,aAAAC,QAAAC,OAAA,2BCAAF,aAAAG,QAAA,eAAA,WAEA,SAAAC,EAAAC,GAEAC,KAAAC,eAGAD,KAAAE,SAAA,EAGAF,KAAAG,UAAA,GAGAH,KAAAI,OAAAL,EAEAC,KAAAK,iBA+CA,OA3CAP,EAAAQ,UAAAC,eAAA,SAAAC,GACA,IAAAC,EAAAC,KAAAC,MAAAH,EAAAR,KAAAG,WACAS,EAAAZ,KAAAC,YAAAQ,GAEA,OAAAG,EACAA,EAAAJ,EAAAR,KAAAG,YAGAH,KAAAa,WAAAJ,GACAG,EAAAZ,KAAAC,YAAAQ,GACAG,EACAA,EAAAJ,EAAAR,KAAAG,WAGA,OAIAL,EAAAQ,UAAAQ,UAAA,WACA,OAAAd,KAAAE,UAGAJ,EAAAQ,UAAAO,WAAA,SAAAJ,GAEAT,KAAAC,YAAAQ,GAAA,KAEAT,KAAAC,YAAAQ,MAEA,IAAA,IADAM,EAAAN,EAAAT,KAAAG,UACAa,EAAAD,EAAAC,EAAAD,EAAAf,KAAAG,UAAAa,IACAhB,KAAAC,YAAAQ,GAAAQ,KAAAjB,KAAAI,OAAAY,KAIAlB,EAAAQ,UAAAD,eAAA,WACAL,KAAAE,SAAAF,KAAAI,OAAAc,QAGApB,EAAAQ,UAAAa,MAAA,SAAApB,GACAC,KAAAI,OAAAL,EACAC,KAAAC,eACAD,KAAAK,kBAGAP","file":"../models.min.js","sourcesContent":["var modelsDomain = angular.module('SolariMonitor.models', []);\r\n","modelsDomain.factory('DynamicItems', function () {\r\n\r\n  function DynamicItems(items) {\r\n    /** @type {!Object<?Array>} Data pages, keyed by page number (0-index). */\r\n    this.loadedPages = {};\r\n\r\n    /** @type {number} Total number of items. */\r\n    this.numItems = 0;\r\n\r\n    /** @const {number} Number of items to fetch per request. */\r\n    this.PAGE_SIZE = 20;\r\n\r\n    /** @type {Array} Items data. */\r\n    this._items = items;\r\n\r\n    this.fetchNumItems_();\r\n  };\r\n\r\n  // Required.\r\n  DynamicItems.prototype.getItemAtIndex = function (index) {\r\n    var pageNumber = Math.floor(index / this.PAGE_SIZE);\r\n    var page = this.loadedPages[pageNumber];\r\n\r\n    if (page) {\r\n      return page[index % this.PAGE_SIZE];\r\n    }\r\n\r\n    this.fetchPage_(pageNumber);\r\n    page = this.loadedPages[pageNumber];\r\n    if (page) {\r\n      return page[index % this.PAGE_SIZE];\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  // Required.\r\n  DynamicItems.prototype.getLength = function () {\r\n    return this.numItems;\r\n  };\r\n\r\n  DynamicItems.prototype.fetchPage_ = function (pageNumber) {\r\n    // Set the page to null so we know it is already being fetched.\r\n    this.loadedPages[pageNumber] = null;\r\n\r\n    this.loadedPages[pageNumber] = [];\r\n    var pageOffset = pageNumber * this.PAGE_SIZE;\r\n    for (var i = pageOffset; i < pageOffset + this.PAGE_SIZE; i++) {\r\n      this.loadedPages[pageNumber].push(this._items[i]);\r\n    }\r\n  };\r\n\r\n  DynamicItems.prototype.fetchNumItems_ = function () {\r\n    this.numItems = this._items.length;\r\n  };\r\n\r\n  DynamicItems.prototype.reset = function (items) {\r\n    this._items = items;\r\n    this.loadedPages = {};\r\n    this.fetchNumItems_();\r\n  };\r\n\r\n  return DynamicItems;\r\n});\r\n"]}