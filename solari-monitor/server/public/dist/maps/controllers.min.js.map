{"version":3,"sources":["application.js","auditLog.js","deviceDetail.js","devices.js","groups.js","history.js","login.js","navbar.js","stationDetail.js","stations.js","users.js","namespace.js"],"names":["ApplicationController","$rootScope","$scope","$window","$location","$timeout","$log","$filter","$sce","toastr","USER_ROLES","AUTH_EVENTS","APPLICATION_EVENTS","PATHS","AuthService","batchStatus","currentUser","userRoles","isAuthenticated","isAuthorized","isLoading","currentNavItem","imageBasePath","mapImagePath","summaryData","stationImageBasePath","tempBasePath","loginSuccessListener","$on","loginSuccess","event","path","notAuthenticatedListener","notAuthenticated","logout","notAuthorizedListener","notAuthorized","loadingCounter","loadingListener","appLoading","args","loading","errorNotificationListener","appErrorNotify","message","description","error","allowHtml","infoNotificationListener","appInfoNotify","info","successNotificationListener","appSuccessNotify","success","loginFailedListener","goto","openCommandDashboard","commandDashboardURI","extra","commandDashboardURISegments","commandDashboardAuth","split","href","open","setBatchProgress","data","setCurrentUser","user","setCurrentNavBarItem","setSummaryData","trustSrc","src","trustAsResourceUrl","trustHtml","html","trustAsHtml","getCurrentUser","then","res","AuditLogController","$mdDialog","auditLogService","deleteData","$event","confirm","title","textContent","ariaLabel","targetEvent","ok","cancel","show","dateStart","setHours","dateEnd","deleteAuditLogs","refresh","catch","err","$broadcast","getAuditLogs","logs","auditLogs","currentDate","Date","startDate","dt","subMonth","setMonth","getMonth","pageTitle","query","order","limit","page","filter","refreshData","selected","DeviceDetailController","$routeParams","$mdSidenav","syncService","devicesService","groupsService","ticketsService","kibanaService","WIZARD_EVENTS","SYNC_EVENTS","clearForm","form","ticketForm","$setUntouched","$setPristine","defaultTicket","deviceId","id","newTicket","angular","copy","filtersForm","chartFilters","defaultChartFilters","commandRequireParams","commandName","command","i","commandsAvailable","length","tmp","name","params","commandSend","deviceCommandForm","commandSelected","extend","device","commandPayLoad","devices","push","displayName","address","parameters","isCommandFormSubmitting","sendCommand","checkLogAvailability","config","getDeviceLog","isLogAvailable","deleteDevice","returnToRoute","destroy","wizardSuccessListener","wizardFailedListener","syncSuccessListener","editDeviceNavClose","close","editDeviceIsOpen","editDeviceNavOpen","stopImmediatePropagation","deviceDefaults","filterChart","payload","dashboardId","kibanaDashUrl","iframeUrl","renderReportIframe","getCurrentStation","stationName","stations","station","getCurrentTemplate","templateName","templates","template","getCustomServiceValues","serviceName","services","checkAllService","prop","hasOwnProperty","service","custom","customServices","find","cs","getCustomThresholdValues","thresholdName","serviceValues","threshold","outputJSON","thresholds","getMaintenance","downtime","startTime","setMinutes","setSeconds","endDate","endTime","isJsonString","str","JSON","parse","e","getTickets","tickets","maintenanceSchedule","newDowntime","getTime","isMaintenanceFormSubmitting","scheduleMaintenance","restartSyncPoller","maintenanceRemove","removeMaintenance","onDetailTabDeSelect","showDetailIframe","onDetailTabSelect","onNewSyncData","processSyncData","onScreenshotTabDeSelect","showScreenshot","onScreenshotTabSelect","onMaintenanceTabSelect","author","surname","onTicketTabSelect","onWizardSuccess","preventDefault","stopPropagation","closeSideBar","updateDeviceCachedData","onWizardFailed","prepareCustomFieldConfs","customFieldConfs","currentTemplate","templateFields","prepareStationFloors","stationFloors","currentStation","floors","debug","dataStr","stringify","lastSyncRequestDataStr","status","summary","random","areas","lines","forEach","output","batchCommands","deviceName","element","document","querySelector","remove","el","createElement","outerHTML","reset","getDashboardUrl","createTicket","isTicketFormSubmitting","currDate","from","to","subject","dashboards","fabIsOpen","fabSelectedMode","groups","wizardSuccess","wizardFailed","syncSuccess","warning","maintenance","lastUpdate","undefined","getCachedSyncData","cachedSyncData","isSyncPollerRunning","startSyncPoller","listGroups","listDashboards","DevicesController","bacthService","popupStationTemplate","DynamicItems","BATCH_EVENTS","checkFilters","filters","visible","superadmin","admin","visibleProduction","production","filterStationSelected","includes","filterLineSelected","includesOneElement","lineNames","searchTerm","term","trim","toLowerCase","search","clearDeviceCommandForm","clearUpdateDevicesForm","updateDevicesForm","updateDevicesCommandSelected","clearDeviceIdList","deviceCheckedIds","checked","key","type","commandsNavClose","commandsNavOpen","isOneDeviceAvailable","batchStatusSuccessListener","deviceSelectAll","selectAll","filtersNavClose","filtersNavOpen","updateDevices","updateDevicesCommands","UPDATE_DEVICES_COMMAND_UPDATE","cloneDevice","UPDATE_DEVICES_COMMAND_ADD_MAINTENANCE","setLocalBatchData","updateDevicesNavClose","updateDevicesNavOpen","uploadDeviceNavClose","uploadDeviceNavOpen","formatDeviceIdList","response","join","getClusterStatus","clusterStations","clusterEmpty","clusterError","clusterWarning","clusterMaintenance","private","stationDevices","stationError","stationWarning","stationMaintenance","code","class","hostClass","getStationStatus","stationEmpty","arr1","arr2","some","v","navClose","side","navShow","toggle","onBatchStatus","onCommandChange","onSearchTermChange","onUpdateDevicesCommandChange","markers","deviceScreenshotIds","deviceRandom","stationsTree","stationDisplayName","lat","position","lng","STATION_UNDEFINED","devicesFiltered","popupContent","deviceNumberViewLimit","showMore","stationStatus","icon","iconSize","className","popupAnchor","popupTemplate","mapMarkers","dynamicItems","dataHasLoaded","setFilterData","isActive","isFilterActive","idx","currentView","view","CURRENT_VIEW_MAP","CURRENT_VIEW_LIST","mapId","mapMarkerCluster","showScreenshots","UPDATE_DEVICES_COMMAND_REMOVE_MAINTENANCE","uploadUrl","statusSuccess","iconCreateFunction","cluster","clusterStatus","getAllChildMarkers","L","divIcon","Point","clusterMouseOverFunction","layer","clusterStation","popup","setContent","bindPopup","openPopup","maxClusterRadius","checkBatchStatus","GroupsController","addGroup","isUpdate","editGroupNavOpen","deleteGroup","deleteGroups","refreshGroups","disableFabToolbar","isOpen","editGroupNavClose","groupForm","groupModel","groupModelIntitial","enableFabToolbar","handleSubmit","isFormSubmitting","groupId","group","updateGroup","createGroup","showConfirm","ev","getGroup","selectedMode","HistoryController","renderIframe","sync","LoginController","$route","submitForm","login","credentials","username","password","NavbarController","$translate","AVAILABLE_LANGUAGES","availableLanguages","currentLanguage","StationDetailController","stationsService","popupDeviceTemplate","checkFloorFilters","isUndefined","floorSelected","stationFloorId","deleteStation","editStationNavClose","stationDefaults","editStationIsOpen","editStationNavOpen","getFloorMapId","floorId","getFloorImageOverlayUrl","mapUrl","floor","onFloorSelected","deviceDisplayName","updateStationCachedData","center","zoom","returnToRouteView","$watch","StationsController","stationCheckedIds","deviceCount","Object","keys","mapEditMarkers","UsersController","usersService","addUser","editUserNavOpen","deleteUser","deleteUsers","refreshUsers","editUserNavClose","userForm","userModel","userModelInitial","userId","updateUser","createUser","listUsers","users","idRole","roleName","maintainer","operator","getUser","confirmPassword","email","idGroup","idRedmine","idKibana","controllersDomain","module","controller"],"mappings":"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","file":"../controllers.min.js","sourcesContent":["controllersDomain.controller('ApplicationController', ApplicationController);\r\n\r\n/* @ngInject */\r\nfunction ApplicationController($rootScope, $scope, $window, $location, $timeout, $log, $filter, $sce,\r\n  toastr, USER_ROLES, AUTH_EVENTS, APPLICATION_EVENTS, PATHS, AuthService) {\r\n\r\n  /**\r\n   * BINDINGS\r\n   ************************************************/\r\n\r\n  $scope.batchStatus = null;\r\n  $scope.currentUser = null;\r\n  $scope.userRoles = USER_ROLES;\r\n  $scope.isAuthenticated = AuthService.isAuthenticated;\r\n  $scope.isAuthorized = AuthService.isAuthorized;\r\n  $scope.isLoading = false;\r\n  $scope.currentNavItem = null;\r\n  $scope.imageBasePath = PATHS.imageBasePath;\r\n  $scope.mapImagePath = PATHS.mapImagePath;\r\n  $scope.summaryData = null;\r\n  $scope.stationImageBasePath = PATHS.stationImageBasePath;\r\n  $scope.tempBasePath = PATHS.tempBasePath;\r\n\r\n\r\n  /**\r\n   * EVENTS\r\n   ************************************************/\r\n\r\n  // Handle the authentication events\r\n  var loginSuccessListener = $scope.$on(AUTH_EVENTS.loginSuccess, function (event) {\r\n    $location.path('/devices');\r\n  });\r\n\r\n  var notAuthenticatedListener = $scope.$on(AUTH_EVENTS.notAuthenticated, function (event) {\r\n    // Used timeout to resolve problem with location change conflicts (refresh)\r\n    $timeout(function () {\r\n      AuthService.logout();\r\n    }, 100);\r\n  });\r\n\r\n  var notAuthorizedListener = $scope.$on(AUTH_EVENTS.notAuthorized, function (event) {\r\n    // Used timeout to resolve problem with location change conflicts (refresh)\r\n    $timeout(function () {\r\n      AuthService.logout();\r\n    }, 100);\r\n  });\r\n\r\n  var loadingCounter = 0;\r\n  var loadingListener = $scope.$on(APPLICATION_EVENTS.appLoading, function (event, args) {\r\n    $timeout(function () {\r\n      if (args.loading) {\r\n        loadingCounter = loadingCounter + 1;\r\n      } else {\r\n        loadingCounter = loadingCounter - 1;\r\n      }\r\n\r\n      $scope.isLoading = loadingCounter > 0;\r\n    }, 100);\r\n  });\r\n\r\n  var errorNotificationListener = $scope.$on(APPLICATION_EVENTS.appErrorNotify, function (event, args) {\r\n    var message = $filter('translate')(args.message);\r\n    if (args.description) {\r\n      message += '<br/><code>' + args.description + '<code>';\r\n    }\r\n    toastr.error(message, $filter('translate')('ERROR'), { allowHtml: true });\r\n  });\r\n\r\n  var infoNotificationListener = $scope.$on(APPLICATION_EVENTS.appInfoNotify, function (event, args) {\r\n    toastr.info($filter('translate')(args.message), $filter('translate')('INFO'));\r\n  });\r\n\r\n  var successNotificationListener = $scope.$on(APPLICATION_EVENTS.appSuccessNotify, function (event, args) {\r\n    toastr.success($filter('translate')(args.message), $filter('translate')('SUCCESS'));\r\n  });\r\n\r\n  $scope.$on('$destroy', function () {\r\n    loginSuccessListener();\r\n    loginFailedListener();\r\n    notAuthenticatedListener();\r\n    notAuthorizedListener();\r\n    loadingListener();\r\n    errorNotificationListener();\r\n    infoNotificationListener();\r\n    successNotificationListener();\r\n  });\r\n\r\n\r\n  /**\r\n   * FUNCTIONS\r\n   ************************************************/\r\n\r\n  $scope.goto = function (path) {\r\n    $location.path(path);\r\n  };\r\n\r\n  $scope.logout = function () {\r\n    AuthService.logout();\r\n  };\r\n\r\n  $scope.openCommandDashboard = function () {\r\n    var commandDashboardURI = $scope.currentUser.extra ? $scope.currentUser.extra.commandDashboardURI : '';\r\n    var commandDashboardAuth = $scope.currentUser.extra ? $scope.currentUser.extra.commandDashboardAuth : '';\r\n    var commandDashboardURISegments = commandDashboardURI.split('://');\r\n\r\n    var href = commandDashboardURISegments[0] + '://' + commandDashboardURISegments[1]; //commandDashboardAuth + '@' +\r\n    $window.open(href, '_blank');\r\n  };\r\n\r\n  $scope.setBatchProgress = function(data) {\r\n    $scope.batchStatus = data;\r\n  };\r\n\r\n  $scope.setCurrentUser = function (user) {\r\n    $scope.currentUser = user;\r\n  };\r\n\r\n  $scope.setCurrentNavBarItem = function (currentNavItem) {\r\n    $timeout(function () {\r\n      $scope.currentNavItem = currentNavItem;\r\n    }, 100);\r\n  };\r\n\r\n  $scope.setSummaryData = function (data) {\r\n    $scope.summaryData = data;\r\n  };\r\n\r\n  $scope.trustSrc = function (src) {\r\n    return $sce.trustAsResourceUrl(src);\r\n  };\r\n\r\n  $scope.trustHtml = function (html) {\r\n    return $sce.trustAsHtml(html);\r\n  };\r\n\r\n\r\n  if ($scope.isAuthenticated()) {\r\n    AuthService.getCurrentUser().then(function (user) {\r\n      $scope.setCurrentUser(user);\r\n    }, function (res) {\r\n      $log.error(res.data);\r\n    });\r\n  }\r\n};\r\n","controllersDomain.controller('AuditLogController', AuditLogController);\r\n\r\n/* @ngInject */\r\nfunction AuditLogController($scope, $rootScope, $log, $mdDialog, $filter, auditLogService, APPLICATION_EVENTS) {\r\n\r\n  var currentDate = new Date();\r\n  var startDate = subtractMonth(currentDate, 1);\r\n  var dateEnd = currentDate;\r\n\r\n\r\n  /**\r\n   * BINDINGS\r\n   ************************************************/\r\n\r\n  $scope.dateStart = startDate;\r\n  $scope.dateEnd = dateEnd;\r\n  $scope.deleteData = deleteData;\r\n  $scope.logs = [];\r\n  $scope.pageTitle = 'AUDIT_LOG';\r\n  $scope.query = { order: 'createdAt', limit: 10, page: 1, filter: '' };\r\n  $scope.refreshData = refresh;\r\n  $scope.selected = [];\r\n\r\n\r\n  activate();\r\n\r\n\r\n  /**\r\n  * FUNCTIONS\r\n  ************************************************/\r\n\r\n  function activate() {\r\n    $scope.setCurrentNavBarItem(null);\r\n    $scope.setSummaryData(null);\r\n    refresh();\r\n  };\r\n\r\n\r\n  function deleteData($event) {\r\n\r\n    // Appending dialog to document.body to cover sidenav in docs app\r\n    var confirm = $mdDialog.confirm()\r\n      .title($filter('translate')('DELETE_CONFIRM_TITLE'))\r\n      .textContent($filter('translate')('DELETE_CONFIRM_MSG'))\r\n      .ariaLabel($filter('translate')('DELETE_CONFIRM_TITLE'))\r\n      .targetEvent($event)\r\n      .ok($filter('translate')('OK'))\r\n      .cancel($filter('translate')('CANCEL'));\r\n\r\n    $mdDialog.show(confirm).then(function () {\r\n      // Confirm function, call service\r\n      var dateStart = $scope.dateStart.setHours(0, 0, 0, 0);\r\n      var dateEnd = $scope.dateEnd.setHours(23, 59, 59, 0);\r\n\r\n      auditLogService\r\n        .deleteAuditLogs(dateStart, dateEnd)\r\n        .then(function () {\r\n          refresh();\r\n        })\r\n        .catch(function (err) {\r\n          $log.error(err);\r\n          $rootScope.$broadcast(APPLICATION_EVENTS.appErrorNotify, { message: err.data.error, description: err.data.description });\r\n        });\r\n\r\n    }, function () {\r\n      // Cancel function, do nothing\r\n    });\r\n  };\r\n\r\n\r\n  function refresh() {\r\n    var dateStart = $scope.dateStart.setHours(0, 0, 0, 0);\r\n    var dateEnd = $scope.dateEnd.setHours(23, 59, 59, 0);\r\n\r\n    auditLogService\r\n      .getAuditLogs(dateStart, dateEnd)\r\n      .then(function (data) {\r\n        $scope.logs = data.auditLogs;\r\n      })\r\n      .catch(function (err) {\r\n        $log.error(err);\r\n        $rootScope.$broadcast(APPLICATION_EVENTS.appErrorNotify, { message: err.data.error, description: err.data.description });\r\n      });\r\n  };\r\n\r\n\r\n  function subtractMonth(dt, subMonth) {\r\n    return new Date(new Date(dt).setMonth(dt.getMonth() - subMonth));\r\n  };\r\n};\r\n","controllersDomain.controller('DeviceDetailController', DeviceDetailController);\r\n\r\n/* @ngInject */\r\nfunction DeviceDetailController(\r\n  $rootScope, $scope, $log, $routeParams, $filter, $timeout, $mdSidenav, $mdDialog,\r\n  syncService, devicesService, groupsService, ticketsService, kibanaService,\r\n  APPLICATION_EVENTS, WIZARD_EVENTS, SYNC_EVENTS) {\r\n\r\n  var lastSyncRequestDataStr = null;\r\n\r\n  var currDate = new Date();\r\n  var fromDate = new Date(currDate.setHours(0, 0, 0, 0));\r\n  var toDate = new Date(currDate.setHours(23, 59, 59, 0));\r\n\r\n  var defaultChartFilters = {\r\n    from: fromDate,\r\n    to: toDate,\r\n    device: -1,\r\n    station: -1,\r\n    template: -1\r\n  };\r\n\r\n  var defaultTicket = {\r\n    subject: \"\",\r\n    description: \"\",\r\n    deviceId: -1,\r\n    deviceName: \"\"\r\n  };\r\n\r\n  /**\r\n   * BINDINGS\r\n   ************************************************/\r\n\r\n  $scope.areas = [];\r\n  $scope.chartFilters = defaultChartFilters;\r\n  $scope.commandsAvailable = [];\r\n  $scope.commandRequireParams = commandRequireParams;\r\n  $scope.commandSelected = {};\r\n  $scope.commandSend = commandSend;\r\n  $scope.createTicket = createTicket;\r\n  $scope.currentStation = null;\r\n  $scope.currentTemplate = null;\r\n  $scope.customFieldConfs = [];\r\n  $scope.editDeviceIsOpen = false;\r\n  $scope.dashboardId = \"\";\r\n  $scope.dashboards = [];\r\n  $scope.deleteDevice = deleteDevice;\r\n  $scope.deviceDefaults = {};\r\n  $scope.device = {};\r\n  $scope.devices = [];\r\n  $scope.downtime = {};\r\n  $scope.editDeviceNavClose = editDeviceNavClose;\r\n  $scope.editDeviceNavOpen = editDeviceNavOpen;\r\n  $scope.filterChart = filterChart;\r\n  $scope.form = {};\r\n  $scope.fabIsOpen = false;\r\n  $scope.fabSelectedMode = 'md-scale';\r\n  $scope.getCustomServiceValues = getCustomServiceValues;\r\n  $scope.getCustomThresholdValues = getCustomThresholdValues;\r\n  $scope.groups = [];\r\n  $scope.id = -1;\r\n  $scope.isLogAvailable = false;\r\n  $scope.isMaintenanceFormSubmitting = false;\r\n  $scope.isCommandFormSubmitting = false;\r\n  $scope.isTicketFormSubmitting = false;\r\n  $scope.kibanaDashUrl = \"\";\r\n  $scope.lines = [];\r\n  $scope.getTickets = getTickets;\r\n  $scope.maintenanceSchedule = maintenanceSchedule;\r\n  $scope.maintenanceRemove = maintenanceRemove;\r\n  $scope.newDowntime = {};\r\n  $scope.newTicket = {};\r\n  $scope.onDetailTabDeSelect = onDetailTabDeSelect;\r\n  $scope.onDetailTabSelect = onDetailTabSelect;\r\n  $scope.onScreenshotTabDeSelect = onScreenshotTabDeSelect;\r\n  $scope.onScreenshotTabSelect = onScreenshotTabSelect;\r\n  $scope.onMaintenanceTabSelect = onMaintenanceTabSelect;\r\n  $scope.onTicketTabSelect = onTicketTabSelect;\r\n  $scope.query = { order: 'id', limit: 5, page: 1 };\r\n  $scope.reset = reset;\r\n  $scope.random;\r\n  $scope.returnToRoute = $routeParams.returnToRoute ? '/devices/' + $routeParams.returnToRoute : '/devices';\r\n  $scope.showDetailIframe = false;\r\n  $scope.showScreenshot = false;\r\n  $scope.selected = [];\r\n  $scope.stationFloors = [];\r\n  $scope.stations = [];\r\n  $scope.templates = [];\r\n  $scope.tickets = [];\r\n\r\n\r\n  /**\r\n   * EVENTS\r\n   ************************************************/\r\n\r\n  var wizardSuccessListener = $scope.$on(WIZARD_EVENTS.wizardSuccess, onWizardSuccess);\r\n  var wizardFailedListener = $scope.$on(WIZARD_EVENTS.wizardFailed, onWizardFailed);\r\n  var syncSuccessListener = $scope.$on(SYNC_EVENTS.syncSuccess, onNewSyncData);\r\n  $scope.$on('$destroy', destroy);\r\n\r\n\r\n  activate();\r\n\r\n\r\n  /**\r\n   * FUNCTIONS\r\n   ************************************************/\r\n\r\n  function clearForm() {\r\n    if ($scope.form.ticketForm) {\r\n      $scope.form.ticketForm.$setUntouched();\r\n      $scope.form.ticketForm.$setPristine();\r\n\r\n      defaultTicket.deviceId = $scope.id;\r\n      $scope.newTicket = angular.copy(defaultTicket);\r\n    }\r\n\r\n    if ($scope.form.filtersForm) {\r\n      $scope.form.filtersForm.$setUntouched();\r\n      $scope.form.filtersForm.$setPristine();\r\n      $scope.chartFilters = angular.copy(defaultChartFilters);\r\n    }\r\n  }\r\n\r\n\r\n  function commandRequireParams(commandName) {\r\n    var command;\r\n    for (var i = 0; i < $scope.commandsAvailable.length; i++) {\r\n      var tmp = $scope.commandsAvailable[i];\r\n      if (tmp.name == commandName) {\r\n        command = tmp;\r\n        break;\r\n      }\r\n    }\r\n\r\n    return command ? command.params : false;\r\n  };\r\n\r\n\r\n  function commandSend(deviceCommandForm) {\r\n    // Add all the fields for the selected command\r\n    for (var i = 0; i < $scope.commandsAvailable.length; i++) {\r\n      var tmp = $scope.commandsAvailable[i];\r\n      if (tmp.name == $scope.commandSelected.name) {\r\n        angular.extend($scope.commandSelected, tmp);\r\n        break;\r\n      }\r\n    }\r\n\r\n    var device = $scope.device;\r\n    var commandPayLoad = { devices: [] };\r\n\r\n    commandPayLoad.devices.push(\r\n      {\r\n        id: device.name,\r\n        title: device.displayName,\r\n        address: device.address,\r\n        command: $scope.commandSelected.command,\r\n        parameters: $scope.commandSelected.parameters\r\n      }\r\n    );\r\n\r\n    $scope.isCommandFormSubmitting = true;\r\n\r\n    devicesService\r\n      .sendCommand(commandPayLoad)\r\n      .then(function (data) {\r\n        $scope.isCommandFormSubmitting = false;\r\n        $rootScope.$broadcast(APPLICATION_EVENTS.appSuccessNotify, { message: 'COMMAND_SENT' });\r\n        // Clear command selection\r\n        $scope.commandSelected = {};\r\n        deviceCommandForm.$setUntouched();\r\n        deviceCommandForm.$setPristine();\r\n      })\r\n      .catch(function (err) {\r\n        $log.error(err);\r\n        $scope.isCommandFormSubmitting = false;\r\n        $rootScope.$broadcast(APPLICATION_EVENTS.appErrorNotify, { message: err.data.error, description: err.data.description });\r\n      });\r\n  };\r\n\r\n\r\n  function activate() {\r\n    $scope.setCurrentNavBarItem('devices'); // defined in application controller\r\n    $scope.setSummaryData({ ok: '-', error: '-', warning: '-', maintenance: '-', lastUpdate: undefined });\r\n\r\n    $scope.id = $routeParams.id;\r\n\r\n    clearForm();\r\n\r\n    defaultTicket.deviceId = $scope.id;\r\n    $scope.newTicket = angular.copy(defaultTicket);\r\n    $scope.chartFilters = angular.copy(defaultChartFilters);\r\n\r\n    // Local cached data\r\n    syncService\r\n      .getCachedSyncData()\r\n      .then(function (cachedSyncData) {\r\n        processSyncData(cachedSyncData);\r\n        if (!syncService.isSyncPollerRunning()) {\r\n          syncService.startSyncPoller();\r\n        }\r\n      })\r\n      .catch(function (err) {\r\n        $log.error(err);\r\n        $rootScope.$broadcast(APPLICATION_EVENTS.appErrorNotify, { message: err.data.error, description: err.data.description });\r\n      });\r\n\r\n    // Load the available groups from the DB and initialize the poller\r\n    groupsService.listGroups()\r\n      .then(function (data) {\r\n        $scope.groups = data.groups;\r\n      })\r\n      .catch(function (err) {\r\n        $log.error(err);\r\n        $rootScope.$broadcast(APPLICATION_EVENTS.appErrorNotify, { message: err.data.error, description: err.data.description });\r\n      });\r\n\r\n    // Load the available groups from the DB and initialize the poller\r\n    kibanaService\r\n      .listDashboards()\r\n      .then(function (data) {\r\n        $scope.dashboards = data.dashboards;\r\n        $scope.dashboardId = $scope.dashboards.length > 0 ? $scope.dashboards[0].id : \"\";\r\n      })\r\n      .catch(function (err) {\r\n        $log.error(err);\r\n        $rootScope.$broadcast(APPLICATION_EVENTS.appErrorNotify, { message: err.data.error, description: err.data.description });\r\n      });\r\n  };\r\n\r\n\r\n  function checkLogAvailability() {\r\n\r\n    if (!$scope.device || !$scope.device.config) {\r\n      return;\r\n    }\r\n\r\n    var address = $scope.device.address;\r\n\r\n    return devicesService.getDeviceLog(address)\r\n      .then(function (data) {\r\n        $scope.isLogAvailable = true;\r\n      })\r\n      .catch(function (err) {\r\n        $log.error(err);\r\n        $scope.isLogAvailable = false;\r\n      });\r\n  }\r\n\r\n\r\n  function deleteDevice($event) {\r\n    // Appending dialog to document.body to cover sidenav in docs app\r\n    var confirm = $mdDialog.confirm()\r\n      .title($filter('translate')('DELETE_CONFIRM_TITLE'))\r\n      .textContent($filter('translate')('DELETE_CONFIRM_MSG'))\r\n      .ariaLabel($filter('translate')('DELETE_CONFIRM_TITLE'))\r\n      .targetEvent($event)\r\n      .ok($filter('translate')('OK'))\r\n      .cancel($filter('translate')('CANCEL'));\r\n\r\n    $mdDialog.show(confirm).then(function () {\r\n      // Confirm function, call service\r\n      devicesService.deleteDevice($scope.device.name, $scope.device)\r\n        .then(function (data) {\r\n          $rootScope.$broadcast(APPLICATION_EVENTS.appSuccessNotify, { message: 'DEVICE_DELETED' });\r\n\r\n          // Return to devices main/list page\r\n          $scope.goto($scope.returnToRoute);\r\n\r\n        })\r\n        .catch(function (err) {\r\n          $log.error(err);\r\n          $rootScope.$broadcast(APPLICATION_EVENTS.appErrorNotify, { message: err.data.error, description: err.data.description });\r\n        });\r\n\r\n    }, function () {\r\n      // Cancel function, do nothing\r\n    });\r\n  };\r\n\r\n\r\n  function destroy() {\r\n    wizardSuccessListener();\r\n    wizardFailedListener();\r\n    syncSuccessListener();\r\n  }\r\n\r\n\r\n  function editDeviceNavClose() {\r\n    $mdSidenav('edit-device-nav').close();\r\n    $scope.editDeviceIsOpen = false;\r\n  };\r\n\r\n\r\n  function editDeviceNavOpen($event) {\r\n    $event.stopImmediatePropagation(); //top the fab closing animation\r\n\r\n    // Load the current device data for editing\r\n    $scope.deviceDefaults = angular.copy($scope.device);\r\n    $scope.editDeviceIsOpen = true;\r\n\r\n    // Timeout to improve animation\r\n    $timeout(function () {\r\n      $mdSidenav('edit-device-nav').open();\r\n    }, 100);\r\n\r\n  };\r\n\r\n\r\n  function filterChart() {\r\n    var payload = $scope.chartFilters;\r\n    kibanaService.filterChart($scope.dashboardId, payload, $scope.id)\r\n      .then(function (data) {\r\n        $scope.kibanaDashUrl = data.iframeUrl;\r\n        renderReportIframe();\r\n      })\r\n      .catch(function (err) {\r\n        $log.error(err);\r\n        $rootScope.$broadcast(APPLICATION_EVENTS.appErrorNotify, { message: err.data.error, description: err.data.description });\r\n      });\r\n  }\r\n\r\n\r\n  function getCurrentStation() {\r\n    if (!$scope.device || !$scope.device.config) {\r\n      return null;\r\n    }\r\n\r\n    var stationName = $scope.device.config.stationName;\r\n    for (var i = 0; i < $scope.stations.length; i++) {\r\n      var station = $scope.stations[i];\r\n      if (station.name == stationName) {\r\n        return station;\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  function getCurrentTemplate() {\r\n    if (!$scope.device || !$scope.device.config) {\r\n      return null;\r\n    }\r\n\r\n    var templateName = $scope.device.config.templateName;\r\n    for (var i = 0; i < $scope.templates.length; i++) {\r\n      var template = $scope.templates[i];\r\n      if (template.name == templateName) {\r\n        return template;\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  function getCustomServiceValues(serviceName) {\r\n    var services = $scope.device.services ? $scope.device.services : {};\r\n    var checkAllService = null;\r\n    for (var prop in services) {\r\n      if (services.hasOwnProperty(prop)) {\r\n        var service = services[prop];\r\n        if (service.custom) {\r\n          checkAllService = service;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    var customServiceValues = checkAllService && checkAllService.customServices ?\r\n      checkAllService.customServices.find(function (cs) { return cs.name === serviceName }) :\r\n      null;\r\n    return customServiceValues;\r\n  };\r\n\r\n\r\n  function getCustomThresholdValues(serviceName, thresholdName) {\r\n    var serviceValues = getCustomServiceValues(serviceName);\r\n    var thresholds = serviceValues && serviceValues.outputJSON && serviceValues.outputJSON.thresholds ? serviceValues.outputJSON.thresholds : [];\r\n    var threshold = thresholds.find(function (threshold) { return threshold.name == thresholdName; });\r\n    return threshold ? threshold : null;\r\n  };\r\n\r\n\r\n  function getMaintenance() {\r\n    devicesService.getMaintenance($scope.id)\r\n      .then(function (downtime) {\r\n\r\n        if (downtime) {\r\n          // Create a Date object for the UI\r\n          downtime.startDate = new Date(downtime.startTime);\r\n          downtime.startDate.setHours(0);\r\n          downtime.startDate.setMinutes(0);\r\n          downtime.startDate.setSeconds(0);\r\n\r\n          // Create a Date object for the UI\r\n          downtime.endDate = new Date(downtime.endTime);\r\n          downtime.endDate.setHours(23);\r\n          downtime.endDate.setMinutes(59);\r\n          downtime.endDate.setSeconds(59);\r\n        }\r\n\r\n        $scope.downtime = downtime;\r\n      })\r\n      .catch(function (err) {\r\n        $log.error(err);\r\n        $rootScope.$broadcast(APPLICATION_EVENTS.appErrorNotify, { message: err.data.error, description: err.data.description });\r\n      });\r\n  };\r\n\r\n\r\n  function isJsonString(str) {\r\n    try {\r\n      JSON.parse(str);\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n\r\n  function getTickets() {\r\n    ticketsService.getTickets($scope.id)\r\n      .then(function (data) {\r\n        $scope.tickets = data.tickets;\r\n      })\r\n      .catch(function (err) {\r\n        $log.error(err);\r\n        $rootScope.$broadcast(APPLICATION_EVENTS.appErrorNotify, { message: err.data.error, description: err.data.description });\r\n      });\r\n  }\r\n\r\n\r\n  function maintenanceSchedule() {\r\n\r\n    var payload = $scope.newDowntime;\r\n\r\n    // Set startTime to 00:00:00\r\n    payload.startDate.setHours(0);\r\n    payload.startDate.setMinutes(0);\r\n    payload.startDate.setSeconds(0);\r\n\r\n    // Set endTime to 23:59:59\r\n    payload.endDate.setHours(23);\r\n    payload.endDate.setMinutes(59);\r\n    payload.endDate.setSeconds(59);\r\n\r\n    payload.startTime = payload.startDate.getTime();\r\n    payload.endTime = payload.endDate.getTime();\r\n\r\n    $scope.isMaintenanceFormSubmitting = true;\r\n\r\n    devicesService.scheduleMaintenance($scope.device.name, payload)\r\n      .then(function (data) {\r\n        $scope.isMaintenanceFormSubmitting = false;\r\n        $rootScope.$broadcast(APPLICATION_EVENTS.appSuccessNotify, { message: 'MAINTENANCE_SCHEDULED' });\r\n\r\n        getMaintenance();\r\n        syncService.restartSyncPoller();\r\n      })\r\n      .catch(function (err) {\r\n        $log.error(err);\r\n        $scope.isMaintenanceFormSubmitting = false;\r\n        $rootScope.$broadcast(APPLICATION_EVENTS.appErrorNotify, { message: err.data.error, description: err.data.description });\r\n      });\r\n  };\r\n\r\n\r\n  function maintenanceRemove($event) {\r\n    // Appending dialog to document.body to cover sidenav in docs app\r\n    var confirm = $mdDialog.confirm()\r\n      .title($filter('translate')('DELETE_CONFIRM_TITLE'))\r\n      .textContent($filter('translate')('DELETE_CONFIRM_MSG'))\r\n      .ariaLabel($filter('translate')('DELETE_CONFIRM_TITLE'))\r\n      .targetEvent($event)\r\n      .ok($filter('translate')('OK'))\r\n      .cancel($filter('translate')('CANCEL'));\r\n\r\n    $mdDialog.show(confirm).then(function () {\r\n      // Confirm function, call service\r\n      devicesService.removeMaintenance($scope.device.name, $scope.downtime)\r\n        .then(function (data) {\r\n          $rootScope.$broadcast(APPLICATION_EVENTS.appSuccessNotify, { message: 'MAINTENANCE_REMOVED' });\r\n\r\n          getMaintenance();\r\n          syncService.restartSyncPoller();\r\n        })\r\n        .catch(function (err) {\r\n          $log.error(err);\r\n          $rootScope.$broadcast(APPLICATION_EVENTS.appErrorNotify, { message: err.data.error, description: err.data.description });\r\n        });\r\n\r\n    }, function () {\r\n      // Cancel function, do nothing\r\n    });\r\n  };\r\n\r\n\r\n  function onDetailTabDeSelect() {\r\n    $scope.showDetailIframe = false;\r\n  };\r\n\r\n\r\n  function onDetailTabSelect() {\r\n    $scope.showDetailIframe = true;\r\n    checkLogAvailability();\r\n  };\r\n\r\n\r\n  function onNewSyncData($event, args) {\r\n    var data = args.data;\r\n    processSyncData(data);\r\n  };\r\n\r\n\r\n  function onScreenshotTabDeSelect() {\r\n    $scope.showScreenshot = false;\r\n  };\r\n\r\n\r\n  function onScreenshotTabSelect() {\r\n    $scope.showScreenshot = true;\r\n  };\r\n\r\n\r\n  function onMaintenanceTabSelect() {\r\n    $scope.newDowntime = { author: $scope.currentUser.name + \" \" + $scope.currentUser.surname };\r\n\r\n    getMaintenance();\r\n  };\r\n\r\n\r\n  function onTicketTabSelect() {\r\n    getTickets();\r\n  };\r\n\r\n\r\n  function onWizardSuccess($event, args) {\r\n    $event.preventDefault();\r\n    $event.stopPropagation();\r\n    $rootScope.$broadcast(APPLICATION_EVENTS.appSuccessNotify, { message: args.message, description: args.description });\r\n\r\n    if (args.closeSideBar) {\r\n      $timeout(function () {\r\n        // Close the sidebar\r\n        $scope.editDeviceNavClose();\r\n\r\n        syncService.updateDeviceCachedData(args.data); //TODO: da rivedere\r\n        syncService.restartSyncPoller();\r\n      }, 0);\r\n    }\r\n  };\r\n\r\n\r\n  function onWizardFailed($event, args) {\r\n    $event.preventDefault();\r\n    $event.stopPropagation();\r\n    $rootScope.$broadcast(APPLICATION_EVENTS.appErrorNotify, { message: args.message, description: args.description });\r\n  };\r\n\r\n\r\n  function prepareCustomFieldConfs() {\r\n    $scope.customFieldConfs = $scope.currentTemplate ? $scope.currentTemplate.custom.templateFields : [];\r\n  };\r\n\r\n\r\n  function prepareStationFloors() {\r\n    $scope.stationFloors = $scope.currentStation ? $scope.currentStation.custom.floors : [];\r\n  };\r\n\r\n\r\n  function processSyncData(data) {\r\n    // Stops if no data is available\r\n    if (!data) {\r\n      $log.debug('No data available');\r\n      $rootScope.$broadcast(APPLICATION_EVENTS.appErrorNotify, { message: 'NO_DATA_AVAILABLE' });\r\n      return;\r\n    }\r\n\r\n    // Stops if the data is not changed\r\n    var dataStr = JSON.stringify(data);\r\n    if (lastSyncRequestDataStr === dataStr) {\r\n      $log.debug('Data not changed');\r\n      return;\r\n    }\r\n\r\n    // Copy of the last data received\r\n    lastSyncRequestDataStr = dataStr;\r\n\r\n    refresh(data);\r\n  };\r\n\r\n\r\n  function refresh(status) {\r\n\r\n    $scope.setSummaryData(status.summary);\r\n\r\n    $scope.random = new Date().getTime();\r\n\r\n    $scope.areas = status.areas;\r\n    $scope.lines = status.lines;\r\n    $scope.devices = status.devices;\r\n    $scope.stations = status.stations;\r\n    $scope.templates = status.templates;\r\n\r\n    var device = null;\r\n    var devices = status.devices;\r\n\r\n    for (var i = 0; i < devices.length; i++) {\r\n      if (devices[i].name === $scope.id) {\r\n        device = devices[i];\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (JSON.stringify(device) === JSON.stringify($scope.device)) {\r\n      $log.debug('Device data not changed');\r\n      return;\r\n    }\r\n\r\n    angular.forEach(device.services, function (service) {\r\n      if (isJsonString(service.output)) {\r\n        service.outputJSON = JSON.parse(service.output);\r\n      }\r\n    });\r\n\r\n    $scope.device = device;\r\n    $scope.commandsAvailable = device.custom.batchCommands;\r\n    $scope.currentTemplate = getCurrentTemplate();\r\n    $scope.currentStation = getCurrentStation();\r\n\r\n    // Aggiorno il device name\r\n    $scope.newTicket.deviceName = $scope.device.displayName;\r\n\r\n    prepareCustomFieldConfs();\r\n    prepareStationFloors();\r\n  };\r\n\r\n\r\n  function renderReportIframe() {\r\n    angular.element(document.querySelector(\"#kibana-iframe\")).remove();\r\n    var el = document.createElement('iframe');\r\n    el.src = $scope.kibanaDashUrl;\r\n    el.id = \"kibana-iframe\";\r\n    angular.element(document.querySelector(\"#kibana-iframe-container\")).html(el.outerHTML);\r\n  }\r\n\r\n\r\n  function reset() {\r\n    $scope.kibanaDashUrl = \"\";\r\n    clearForm();\r\n\r\n    kibanaService.getDashboardUrl($scope.dashboardId, $scope.id)\r\n      .then(function (data) {\r\n        $scope.kibanaDashUrl = data.iframeUrl;\r\n        renderReportIframe();\r\n      })\r\n      .catch(function (err) {\r\n        $log.error(err);\r\n        $rootScope.$broadcast(APPLICATION_EVENTS.appErrorNotify, { message: err.data.error, description: err.data.description });\r\n      });\r\n  }\r\n\r\n\r\n  function createTicket() {\r\n    var payload = $scope.newTicket;\r\n\r\n    $scope.isTicketFormSubmitting = true;\r\n\r\n    ticketsService\r\n      .createTicket(payload)\r\n      .then(function (data) {\r\n        $scope.isTicketFormSubmitting = false;\r\n        clearForm();\r\n        getTickets();\r\n        $rootScope.$broadcast(APPLICATION_EVENTS.appSuccessNotify, { message: 'TICKET_CREATED' });\r\n      })\r\n      .catch(function (err) {\r\n        $log.error(err);\r\n        $scope.isTicketFormSubmitting = false;\r\n        $rootScope.$broadcast(APPLICATION_EVENTS.appErrorNotify, { message: err.data.error, description: err.data.description });\r\n      });\r\n  }\r\n\r\n}\r\n","controllersDomain.controller('DevicesController', DevicesController);\r\n\r\n/* @ngInject */\r\nfunction DevicesController($rootScope, $scope, $log, $timeout, $filter, $routeParams, $mdSidenav,\r\n  devicesService, groupsService, syncService, bacthService, popupStationTemplate, DynamicItems,\r\n  APPLICATION_EVENTS, WIZARD_EVENTS, SYNC_EVENTS, BATCH_EVENTS) {\r\n\r\n  var CURRENT_VIEW_MAP = 'map';\r\n  var CURRENT_VIEW_LIST = 'list';\r\n  var DEVICE_POPUP_LIMIT = 6;\r\n  var STATION_UNDEFINED = 'MR-UNDEFINED';\r\n  var UPDATE_DEVICES_COMMAND_TYPE_HTTP = 'HTTP';\r\n  var UPDATE_DEVICES_COMMAND_TYPE_MAINTENANCE = 'MNT';\r\n  var UPDATE_DEVICES_COMMAND_UPDATE = 'update';\r\n  var UPDATE_DEVICES_COMMAND_ADD_MAINTENANCE = 'add_maintenance';\r\n  var UPDATE_DEVICES_COMMAND_REMOVE_MAINTENANCE = 'remove_maintenance';\r\n\r\n  var lastSyncRequestDataStr = null;\r\n  var updateDevicesCommands = [\r\n    {\r\n      type: UPDATE_DEVICES_COMMAND_TYPE_HTTP,\r\n      name: UPDATE_DEVICES_COMMAND_UPDATE,\r\n      displayName: 'Update Production'\r\n    },\r\n    {\r\n      type: UPDATE_DEVICES_COMMAND_TYPE_MAINTENANCE,\r\n      name: UPDATE_DEVICES_COMMAND_ADD_MAINTENANCE,\r\n      displayName: 'Schedule Maintenance'\r\n    },\r\n    {\r\n      type: UPDATE_DEVICES_COMMAND_TYPE_HTTP,\r\n      name: UPDATE_DEVICES_COMMAND_REMOVE_MAINTENANCE,\r\n      displayName: 'Remove Maintenance'\r\n    }\r\n  ];\r\n\r\n\r\n  /**\r\n   * BINDINGS\r\n   ************************************************/\r\n\r\n  $scope.areas = [];\r\n  $scope.batchStatus = null;\r\n  $scope.clearDeviceCommandForm = clearDeviceCommandForm;\r\n  $scope.clearUpdateDevicesForm = clearUpdateDevicesForm;\r\n  $scope.commandsAvailable = [];\r\n  $scope.commandsNavClose = commandsNavClose;\r\n  $scope.commandsNavOpen = commandsNavOpen;\r\n  $scope.commandRequireParams = commandRequireParams;\r\n  $scope.commandSelected = {};\r\n  $scope.commandSend = commandSend;\r\n  $scope.currentView = $routeParams.view || CURRENT_VIEW_MAP;\r\n  $scope.CURRENT_VIEW_MAP = CURRENT_VIEW_MAP;\r\n  $scope.CURRENT_VIEW_LIST = CURRENT_VIEW_LIST;\r\n  $scope.dataHasLoaded = false;\r\n  $scope.devices = [];\r\n  $scope.deviceCheckedIds = {};\r\n  $scope.deviceNumberViewLimit = DEVICE_POPUP_LIMIT;\r\n  $scope.deviceRandom = {};\r\n  $scope.deviceSelectAll = deviceSelectAll;\r\n  $scope.deviceScreenshotIds = {};\r\n  $scope.dynamicItems = null;\r\n  $scope.editDeviceNavClose = editDeviceNavClose;\r\n  $scope.editDeviceNavOpen = editDeviceNavOpen;\r\n  $scope.editDeviceIsOpen = false;\r\n  $scope.fabIsOpen = false;\r\n  $scope.fabSelectedMode = 'md-scale';\r\n  $scope.filters = null;\r\n  $scope.formatDeviceIdList = formatDeviceIdList;\r\n  $scope.filtersNavClose = filtersNavClose;\r\n  $scope.filtersNavOpen = filtersNavOpen;\r\n  $scope.getCustomServiceValues = getCustomServiceValues;\r\n  $scope.groups = [];\r\n  $scope.isFilterActive = false;\r\n  $scope.isOneDeviceAvailable = false;\r\n  $scope.lines = [];\r\n  $scope.mapId = 'mainMap';\r\n  $scope.mapMarkers = [];\r\n  $scope.mapMarkerCluster = null;\r\n  $scope.navClose = navClose;\r\n  $scope.navShow = navShow;\r\n  $scope.onCommandChange = onCommandChange;\r\n  $scope.onSearchTermChange = onSearchTermChange;\r\n  $scope.onUpdateDevicesCommandChange = onUpdateDevicesCommandChange;\r\n  $scope.pageTitle = 'Devices';\r\n  $scope.searchTerm = { term: '' };\r\n  $scope.setFilterData = setFilterData;\r\n  $scope.showScreenshot = showScreenshot;\r\n  $scope.showScreenshots = false;\r\n  $scope.stations = [];\r\n  $scope.templates = [];\r\n  $scope.UPDATE_DEVICES_COMMAND_UPDATE = UPDATE_DEVICES_COMMAND_UPDATE;\r\n  $scope.UPDATE_DEVICES_COMMAND_ADD_MAINTENANCE = UPDATE_DEVICES_COMMAND_ADD_MAINTENANCE;\r\n  $scope.UPDATE_DEVICES_COMMAND_REMOVE_MAINTENANCE = UPDATE_DEVICES_COMMAND_REMOVE_MAINTENANCE;\r\n  $scope.updateDevices = updateDevices;\r\n  $scope.updateDevicesCommands = updateDevicesCommands;\r\n  $scope.updateDevicesCommandSelected = {};\r\n  $scope.updateDevicesNavClose = updateDevicesNavClose;\r\n  $scope.updateDevicesNavOpen = updateDevicesNavOpen;\r\n  $scope.uploadDeviceNavClose = uploadDeviceNavClose;\r\n  $scope.uploadDeviceNavOpen = uploadDeviceNavOpen;\r\n  $scope.uploadUrl = \"/devices/import/upload\";\r\n\r\n\r\n  /**\r\n   * EVENTS\r\n   ************************************************/\r\n\r\n  var wizardSuccessListener = $scope.$on(WIZARD_EVENTS.wizardSuccess, onWizardSuccess);\r\n  var wizardFailedListener = $scope.$on(WIZARD_EVENTS.wizardFailed, onWizardFailed);\r\n  var syncSuccessListener = $scope.$on(SYNC_EVENTS.syncSuccess, onNewSyncData);\r\n  var batchStatusSuccessListener = $scope.$on(BATCH_EVENTS.statusSuccess, onBatchStatus);\r\n  $scope.$on('$destroy', destroy);\r\n\r\n\r\n  activate();\r\n\r\n\r\n  /**\r\n   * FUNCTIONS\r\n   ************************************************/\r\n\r\n  function activate() {\r\n    $scope.setCurrentNavBarItem('devices'); // defined in application controller\r\n    $scope.setSummaryData({ ok: '-', error: '-', warning: '-', maintenance: '-', lastUpdate: undefined });\r\n\r\n    $scope.mapMarkerCluster = {\r\n      iconCreateFunction: function (cluster) {\r\n        var markers = cluster.getAllChildMarkers();\r\n\r\n        var clusterStatus = getClusterStatus(markers);\r\n\r\n        return new L.divIcon({\r\n          html: '<div><span><b>' + clusterStatus.code + '</b></span></div>',\r\n          className: 'marker-cluster ' + clusterStatus.class,\r\n          iconSize: new L.Point(40, 40)\r\n        });\r\n      },\r\n      clusterMouseOverFunction: function (event) {\r\n        var layer = event.layer;\r\n        var clusterStations = layer.getAllChildMarkers();\r\n\r\n        var html = \"<b>Station Cluster Detail</b><br>\";\r\n\r\n        angular.forEach(clusterStations, function (clusterStation) {\r\n          var station = clusterStation.private;\r\n          var stationStatus = getStationStatus(station);\r\n\r\n          html += \"<div class='clusterDetailBox'>\";\r\n          html += \"<span>\" + station.displayName + \"</span> \";\r\n          html += \"<span class='statusCircle \" + stationStatus.hostClass + \"'></span>\";\r\n          html += \"</div>\"\r\n        });\r\n\r\n        var popup = L.popup().setContent(html);\r\n        layer.bindPopup(popup);\r\n        layer.openPopup();\r\n      },\r\n      maxClusterRadius: 80,\r\n    };\r\n\r\n    bacthService.checkBatchStatus(); //TODO: da capire se va bene qui\r\n\r\n    // Local cached data\r\n    syncService\r\n      .getCachedSyncData()\r\n      .then(function (cachedSyncData) {\r\n        processSyncData(cachedSyncData);\r\n        if (!syncService.isSyncPollerRunning()) {\r\n          syncService.startSyncPoller();\r\n        }\r\n      })\r\n      .catch(function (err) {\r\n        $log.error(err);\r\n        $rootScope.$broadcast(APPLICATION_EVENTS.appErrorNotify, { message: err.data.error, description: err.data.description });\r\n      });\r\n\r\n    // Load the available groups from the DB and initialize the poller\r\n    groupsService\r\n      .listGroups()\r\n      .then(function (data) {\r\n        $scope.groups = data.groups;\r\n      })\r\n      .catch(function (err) {\r\n        $log.error(err);\r\n        $rootScope.$broadcast(APPLICATION_EVENTS.appErrorNotify, { message: err.data.error, description: err.data.description });\r\n      });\r\n  };\r\n\r\n\r\n  function checkFilters(device) {\r\n    if (!$scope.filters) {\r\n      return true;\r\n    }\r\n\r\n    var visible = false;\r\n\r\n    visible |= $scope.filters['filterStatusError'] && !device.maintenance && device.error;\r\n\r\n    visible |= $scope.filters['filterStatusWarning'] && !device.maintenance && !device.error && device.warning;\r\n\r\n    visible |= $scope.filters['filterStatusOk'] && !device.error && !device.warning;\r\n\r\n    visible |= $scope.filters['filterStatusMaintenance'] && device.maintenance;\r\n\r\n    // filtro applicato solo se sono autorizzato alla visualizzazione dei dispositivi NON in produzione\r\n    if ($scope.isAuthorized([$scope.userRoles.superadmin, $scope.userRoles.admin])) {\r\n      var visibleProduction = $scope.filters['filterStatusProduction'] && device.config.production;\r\n      visibleProduction |= $scope.filters['filterStatusNoProduction'] && !device.config.production;\r\n      visible &= visibleProduction;\r\n    } else {\r\n      // altrimenti NON mostro quelli NON in produzione\r\n      visible &= device.config.production;\r\n    }\r\n\r\n    var filterStationSelected = $scope.filters['filterStationSelected'];\r\n    visible &= filterStationSelected == null || filterStationSelected.length == 0 || filterStationSelected.includes(device.config.stationName);\r\n\r\n    var filterLineSelected = $scope.filters['filterLineSelected'];\r\n    visible &= filterLineSelected == null || filterLineSelected.length == 0 || includesOneElement(device.config.lineNames, filterLineSelected);\r\n\r\n    var searchTerm = $scope.searchTerm && $scope.searchTerm.term ? $scope.searchTerm.term.trim().toLowerCase() : null;\r\n    if (searchTerm && searchTerm !== '') {\r\n      visible &= (device.displayName.toLowerCase().search(searchTerm) > -1 || device.address.toLowerCase().search(searchTerm) > -1);\r\n    }\r\n\r\n    return visible;\r\n  };\r\n\r\n\r\n  function clearDeviceCommandForm(deviceCommandForm) {\r\n\r\n    if (deviceCommandForm) {\r\n      // Reset form and disable error messages\r\n      deviceCommandForm.$setPristine();\r\n      deviceCommandForm.$setUntouched();\r\n    }\r\n\r\n    // Empty the command list\r\n    $scope.commandsAvailable = [];\r\n\r\n    // Empty the command object\r\n    $scope.commandSelected = {};\r\n  };\r\n\r\n\r\n  function clearUpdateDevicesForm(updateDevicesForm) {\r\n\r\n    if (updateDevicesForm) {\r\n      // Reset form and disable error messages\r\n      updateDevicesForm.$setPristine();\r\n      updateDevicesForm.$setUntouched();\r\n    }\r\n\r\n    // Empty the command object\r\n    $scope.updateDevicesCommandSelected = {};\r\n  };\r\n\r\n\r\n  function clearDeviceIdList() {\r\n    angular.forEach($scope.deviceCheckedIds, function (checked, key) {\r\n      $scope.deviceCheckedIds[key] = false;\r\n    });\r\n  };\r\n\r\n\r\n  function commandRequireParams(commandName) {\r\n    var command;\r\n    for (var i = 0; i < $scope.commandsAvailable.length; i++) {\r\n      var tmp = $scope.commandsAvailable[i];\r\n      if (tmp.name == commandName) {\r\n        command = tmp;\r\n        break;\r\n      }\r\n    }\r\n\r\n    return command ? command.params : false;\r\n  };\r\n\r\n\r\n  function commandSend(deviceCommandForm) {\r\n\r\n    // Add all the fields for the selected command\r\n    for (var i = 0; i < $scope.commandsAvailable.length; i++) {\r\n      var tmp = $scope.commandsAvailable[i];\r\n      if (tmp.name == $scope.commandSelected.name) {\r\n        angular.extend($scope.commandSelected, tmp);\r\n        break;\r\n      }\r\n    }\r\n\r\n    var commandPayLoad = { devices: [] };\r\n\r\n    angular.forEach($scope.devices, function (device) {\r\n      if ($scope.deviceCheckedIds[device.name]) {\r\n        commandPayLoad.devices.push(\r\n          {\r\n            id: device.name,\r\n            title: device.displayName,\r\n            address: device.address,\r\n            command: $scope.commandSelected.command,\r\n            commandName: $scope.commandSelected.name,\r\n            parameters: $scope.commandSelected.parameters,\r\n            type: 'CMD',\r\n          }\r\n        );\r\n      }\r\n    });\r\n\r\n    devicesService\r\n      .sendCommand(commandPayLoad)\r\n      .then(function (data) {\r\n        $rootScope.$broadcast(APPLICATION_EVENTS.appSuccessNotify, { message: 'COMMAND_SENT' });\r\n        $scope.commandsNavClose(deviceCommandForm);\r\n      })\r\n      .catch(function (err) {\r\n        $log.error(err);\r\n        $rootScope.$broadcast(APPLICATION_EVENTS.appErrorNotify, { message: err.data.error, description: err.data.description });\r\n      });\r\n  };\r\n\r\n\r\n  function commandsNavClose(deviceCommandForm) {\r\n\r\n    $scope.clearDeviceCommandForm(deviceCommandForm); // TODO: non capisco perchè sono obbligato a passare il \"name\" della form e non recuperarla dallo scope\r\n\r\n    $mdSidenav('commands-nav').close();\r\n  };\r\n\r\n\r\n  function commandsNavOpen($event) {\r\n    $event.stopImmediatePropagation(); //top the fab closing animation\r\n\r\n    $scope.isOneDeviceAvailable = false;\r\n\r\n    // TODO: Adesso viene fatto un intersect dei comandi da valutare se abilitare/disabilitare il pulsante se non sono tutti uguali\r\n    // Prepare the command list\r\n    angular.forEach($scope.devices, function (device) {\r\n      if ($scope.deviceCheckedIds[device.name]) {\r\n        if ($scope.commandsAvailable.length == 0) {\r\n          $scope.commandsAvailable = device.custom.batchCommands;\r\n        } else {\r\n          $scope.commandsAvailable = $filter('intersect')($scope.commandsAvailable, device.custom.batchCommands);\r\n        }\r\n\r\n        $scope.isOneDeviceAvailable = true;\r\n      }\r\n    });\r\n\r\n    $mdSidenav('commands-nav').open();\r\n  };\r\n\r\n\r\n  function destroy() {\r\n    wizardSuccessListener();\r\n    wizardFailedListener();\r\n    syncSuccessListener();\r\n    batchStatusSuccessListener();\r\n  };\r\n\r\n\r\n  function deviceSelectAll(selectAll) {\r\n    angular.forEach($scope.deviceCheckedIds, function (checked, key) {\r\n      $scope.deviceCheckedIds[key] = selectAll;\r\n    });\r\n  };\r\n\r\n\r\n  function editDeviceNavClose() {\r\n    $mdSidenav('edit-device-nav').close();\r\n    $scope.editDeviceIsOpen = false;\r\n  };\r\n\r\n\r\n  function editDeviceNavOpen($event) {\r\n    $event.stopImmediatePropagation(); //top the fab closing animation\r\n    $mdSidenav('edit-device-nav').open();\r\n    $scope.editDeviceIsOpen = true;\r\n  };\r\n\r\n\r\n  function filtersNavClose() {\r\n    $mdSidenav('filters-nav').close();\r\n  };\r\n\r\n\r\n  function filtersNavOpen($event) {\r\n    $event.stopImmediatePropagation(); //top the fab closing animation\r\n    $mdSidenav('filters-nav').open();\r\n  };\r\n\r\n\r\n  function getCustomServiceValues(device, serviceName) {\r\n    var services = device.services ? device.services : {};\r\n    var checkAllService = null;\r\n    for (var prop in services) {\r\n      if (services.hasOwnProperty(prop)) {\r\n        var service = services[prop];\r\n        if (service.custom) {\r\n          checkAllService = service;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    var customServiceValues = checkAllService && checkAllService.customServices ?\r\n      checkAllService.customServices.find(function (cs) { return cs.name === serviceName }) :\r\n      null;\r\n    return customServiceValues;\r\n  };\r\n\r\n\r\n  function updateDevices(updateDevicesForm) {\r\n    // Add all the fields for the selected command\r\n    for (var i = 0; i < $scope.updateDevicesCommands.length; i++) {\r\n      var tmp = $scope.updateDevicesCommands[i];\r\n      if (tmp.name == $scope.updateDevicesCommandSelected.name) {\r\n        angular.extend($scope.updateDevicesCommandSelected, tmp);\r\n        break;\r\n      }\r\n    }\r\n\r\n    var commandPayLoad = { devices: [] };\r\n\r\n    angular.forEach($scope.devices, function (device) {\r\n      if ($scope.deviceCheckedIds[device.name]) {\r\n        if ($scope.updateDevicesCommandSelected.name == UPDATE_DEVICES_COMMAND_UPDATE) {\r\n          var cloneDevice = JSON.parse(JSON.stringify(device));\r\n          cloneDevice.config.production = $scope.updateDevicesCommandSelected.parameters || false;\r\n          commandPayLoad.devices.push(\r\n            {\r\n              id: device.name,\r\n              title: device.displayName,\r\n              address: device.address,\r\n              commandName: $scope.updateDevicesCommandSelected.name,\r\n              parameters: cloneDevice,\r\n              type: $scope.updateDevicesCommandSelected.type,\r\n            }\r\n          );\r\n        } else if ($scope.updateDevicesCommandSelected.name == UPDATE_DEVICES_COMMAND_ADD_MAINTENANCE) {\r\n\r\n          var parameters = $scope.updateDevicesCommandSelected.parameters;\r\n\r\n          // Set startTime to 00:00:00\r\n          parameters.startDate.setHours(0);\r\n          parameters.startDate.setMinutes(0);\r\n          parameters.startDate.setSeconds(0);\r\n\r\n          // Set endTime to 23:59:59\r\n          parameters.endDate.setHours(23);\r\n          parameters.endDate.setMinutes(59);\r\n          parameters.endDate.setSeconds(59);\r\n\r\n          parameters.startTime = parameters.startDate.getTime();\r\n          parameters.endTime = parameters.endDate.getTime();\r\n\r\n          commandPayLoad.devices.push(\r\n            {\r\n              id: device.name,\r\n              title: device.displayName,\r\n              address: device.address,\r\n              commandName: $scope.updateDevicesCommandSelected.name,\r\n              parameters: parameters,\r\n              type: $scope.updateDevicesCommandSelected.type,\r\n            }\r\n          );\r\n        }\r\n        else {\r\n          commandPayLoad.devices.push(\r\n            {\r\n              id: device.name,\r\n              title: device.displayName,\r\n              address: device.address,\r\n              commandName: $scope.updateDevicesCommandSelected.name,\r\n              parameters: $scope.updateDevicesCommandSelected.parameters,\r\n              type: $scope.updateDevicesCommandSelected.type,\r\n            }\r\n          );\r\n        }\r\n      }\r\n    });\r\n\r\n    devicesService\r\n      .updateDevices(commandPayLoad)\r\n      .then(function (data) {\r\n        $rootScope.$broadcast(APPLICATION_EVENTS.appSuccessNotify, { message: 'COMMAND_SENT' });\r\n        // $scope.updateDevicesNavClose(updateDevicesForm);\r\n\r\n        // Aggiungo il batch nel local storage in modo da poterne verificare il progress\r\n        bacthService.setLocalBatchData(data);\r\n      })\r\n      .catch(function (err) {\r\n        $log.error(err);\r\n        $rootScope.$broadcast(APPLICATION_EVENTS.appErrorNotify, { message: err.data.error, description: err.data.description });\r\n      });\r\n  };\r\n\r\n\r\n  function updateDevicesNavClose(updateDevicesForm) {\r\n    $scope.clearUpdateDevicesForm(updateDevicesForm); // TODO: non capisco perchè sono obbligato a passare il \"name\" della form e non recuperarla dallo scope\r\n\r\n    $mdSidenav('updatedevices-nav').close();\r\n  };\r\n\r\n\r\n  function updateDevicesNavOpen($event) {\r\n    $event.stopImmediatePropagation(); //top the fab closing animation\r\n\r\n    $mdSidenav('updatedevices-nav').open();\r\n  };\r\n\r\n\r\n  function uploadDeviceNavClose() {\r\n    $mdSidenav('uploaddevice-nav').close();\r\n  };\r\n\r\n\r\n  function uploadDeviceNavOpen($event) {\r\n    $event.stopImmediatePropagation(); //top the fab closing animation\r\n    $mdSidenav('uploaddevice-nav').open();\r\n  };\r\n\r\n\r\n  function formatDeviceIdList(deviceCheckedIds) {\r\n    var response = [];\r\n\r\n    if (deviceCheckedIds) {\r\n      angular.forEach($scope.devices, function (device) {\r\n        if (deviceCheckedIds[device.name]) {\r\n          response.push('<span class=\\\"tag\\\">' + device.displayName + '</span>');\r\n        }\r\n      });\r\n    }\r\n    return $scope.trustHtml(response.join(''));\r\n  };\r\n\r\n\r\n  function getClusterStatus(clusterStations) {\r\n    var clusterEmpty = true;\r\n    var clusterError = false;\r\n    var clusterWarning = false;\r\n    var clusterMaintenance = true;\r\n    for (var i = 0; i < clusterStations.length; i++) {\r\n      var clusterStation = clusterStations[i];\r\n      var station = clusterStation.private;\r\n\r\n      var stationDevices = [];\r\n      var stationError = false;\r\n      var stationWarning = false;\r\n      var stationMaintenance = true;\r\n      angular.forEach(station.devices, function (device) {\r\n        // Prepare the device filtered list\r\n        if (checkFilters(device)) {\r\n          stationDevices.push(device);\r\n          stationError |= device.error;\r\n          stationWarning |= device.warning;\r\n          stationMaintenance &= device.maintenance;\r\n        }\r\n      });\r\n\r\n      // Una stazione è in manutenzione se ha almeno un dispositivo\r\n      stationMaintenance &= stationDevices.length > 0;\r\n\r\n      clusterEmpty &= stationDevices.length === 0;\r\n      clusterError |= stationMaintenance == false && stationError;\r\n      clusterWarning |= clusterError == false && stationWarning;\r\n      clusterMaintenance &= stationMaintenance;\r\n    }\r\n\r\n    var status = {\r\n      code: 'OK',\r\n      class: 'marker-cluster-ok',\r\n      hostClass: 'ok-host'\r\n    };\r\n\r\n    if (clusterMaintenance) {\r\n      status.code = 'MNT';\r\n      status.class = 'marker-cluster-maintenance';\r\n      status.hostClass = 'maintenance-host';\r\n    }\r\n    else if (clusterError) {\r\n      status.code = 'ERR';\r\n      status.class = 'marker-cluster-error';\r\n      status.hostClass = 'error-host';\r\n    }\r\n    else if (clusterWarning) {\r\n      status.code = 'WAR';\r\n      status.class = 'marker-cluster-warning';\r\n      status.hostClass = 'warning-host';\r\n    }\r\n    else if (clusterEmpty) {\r\n      status.code = 'MTY';\r\n      status.class = 'marker-cluster-empty';\r\n      status.hostClass = 'empty-host';\r\n    }\r\n\r\n    return status;\r\n  }\r\n\r\n\r\n  function getStationStatus(station) {\r\n    var stationDevices = [];\r\n    var stationEmpty = false;\r\n    var stationError = false;\r\n    var stationWarning = false;\r\n    var stationMaintenance = true;\r\n    angular.forEach(station.devices, function (device) {\r\n      // Prepera the device filtered list\r\n      if (checkFilters(device)) {\r\n        stationDevices.push(device);\r\n\r\n        stationError |= device.error;\r\n        stationWarning |= device.warning;\r\n        stationMaintenance &= device.maintenance;\r\n      }\r\n    });\r\n\r\n    stationEmpty = stationDevices.length === 0;\r\n\r\n    // Una stazione è in manutenzione se ha almeno un dispositivo\r\n    stationMaintenance &= stationDevices.length > 0;\r\n\r\n    var status = {\r\n      code: 'OK',\r\n      class: 'marker-cluster-ok',\r\n      hostClass: 'ok-host'\r\n    };\r\n\r\n    if (stationMaintenance) {\r\n      status.code = 'MNT';\r\n      status.class = 'marker-cluster-maintenance';\r\n      status.hostClass = 'maintenance-host';\r\n    }\r\n    else if (stationError) {\r\n      status.code = 'ERR';\r\n      status.class = 'marker-cluster-error';\r\n      status.hostClass = 'error-host';\r\n    }\r\n    else if (stationWarning) {\r\n      status.code = 'WAR';\r\n      status.class = 'marker-cluster-warning';\r\n      status.hostClass = 'warning-host';\r\n    }\r\n    else if (stationEmpty) {\r\n      status.code = 'MTY';\r\n      status.class = 'marker-cluster-empty';\r\n      status.hostClass = 'empty-host';\r\n    }\r\n\r\n    return status;\r\n  }\r\n\r\n\r\n  function includesOneElement(arr1, arr2) {\r\n    return arr1.some(function (v) {\r\n      return arr2.includes(v);\r\n    });\r\n  }\r\n\r\n\r\n  function navClose(side) {\r\n    $mdSidenav(side)\r\n      .close();\r\n  };\r\n\r\n\r\n  function navShow(side) {\r\n    $mdSidenav(side)\r\n      .toggle();\r\n  };\r\n\r\n\r\n  function onBatchStatus($event, args) {\r\n    // $scope.setBatchProgress(args.data);\r\n    $scope.batchStatus = args.data;\r\n    syncService.restartSyncPoller();\r\n  };\r\n\r\n\r\n  function onCommandChange($event) {\r\n    if ($scope.commandSelected) {\r\n      $scope.commandSelected.parameters = undefined;\r\n    }\r\n  };\r\n\r\n\r\n  function onNewSyncData($event, args) {\r\n    var syncData = args.data;\r\n    processSyncData(syncData);\r\n  };\r\n\r\n\r\n  function onSearchTermChange($event) {\r\n    if (lastSyncRequestDataStr) {\r\n      clearDeviceIdList();\r\n      refresh(JSON.parse(lastSyncRequestDataStr));\r\n    }\r\n  }\r\n\r\n\r\n  function onUpdateDevicesCommandChange($event) {\r\n    if ($scope.updateDevicesCommandSelected) {\r\n      $scope.updateDevicesCommandSelected.parameters = undefined;\r\n\r\n      if ($scope.updateDevicesCommandSelected.name == $scope.UPDATE_DEVICES_COMMAND_ADD_MAINTENANCE) {\r\n        $scope.updateDevicesCommandSelected.parameters = { author: $scope.currentUser.name + \" \" + $scope.currentUser.surname }\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  function onWizardSuccess($event, args) {\r\n    $event.preventDefault();\r\n    $event.stopPropagation();\r\n    $rootScope.$broadcast(APPLICATION_EVENTS.appSuccessNotify, { message: args.message });\r\n\r\n    if (args.closeSideBar) {\r\n      $timeout(function () {\r\n        // Close the sidebar\r\n        $scope.editDeviceNavClose();\r\n\r\n        syncService.updateDeviceCachedData(args.data); //TODO: da rivedere\r\n        syncService.restartSyncPoller();\r\n      }, 0);\r\n    }\r\n  };\r\n\r\n\r\n  function onWizardFailed($event, args) {\r\n    $event.preventDefault();\r\n    $event.stopPropagation();\r\n    $rootScope.$broadcast(APPLICATION_EVENTS.appErrorNotify, { message: args.message, description: args.description });\r\n  };\r\n\r\n\r\n  function processSyncData(data) {\r\n    // Stops if no data is available\r\n    if (!data) {\r\n      $log.debug('No data available');\r\n      $rootScope.$broadcast(APPLICATION_EVENTS.appErrorNotify, { message: 'NO_DATA_AVAILABLE' });\r\n      return;\r\n    }\r\n\r\n    // Stops if the data is not changed\r\n    var dataStr = JSON.stringify(data);\r\n    if (lastSyncRequestDataStr === dataStr) {\r\n      $log.debug('Data not changed');\r\n      return;\r\n    }\r\n\r\n    // Copy of the last data received\r\n    lastSyncRequestDataStr = dataStr;\r\n\r\n    refresh(data);\r\n  };\r\n\r\n\r\n  function refresh(status) {\r\n\r\n    $scope.setSummaryData(status.summary);\r\n\r\n    $scope.areas = status.areas;\r\n    $scope.lines = status.lines;\r\n    $scope.stations = status.stations;\r\n    $scope.templates = status.templates;\r\n\r\n    var markers = {};\r\n    var devices = [];\r\n\r\n    var deviceScreenshotIds = {};\r\n    var deviceCheckedIds = {};\r\n    var deviceRandom = {};\r\n    var stationsTree = status.stationsTree || [];\r\n    angular.forEach(stationsTree, function (station, key) {\r\n\r\n      var stationName = station.name;\r\n      var stationDisplayName = station.displayName;\r\n      var lat = station.custom.position.lat;\r\n      var lng = station.custom.position.lng;\r\n      var lineNames = station.custom.lineNames;\r\n\r\n      // Rimuove la stazione *MR-UNDEFINED* dalla visualizzazione a mappa\r\n      if (stationName !== STATION_UNDEFINED) {\r\n\r\n        var devicesFiltered = [];\r\n        for (key in station.devices) {\r\n\r\n          var device = station.devices[key];\r\n          if (checkFilters(device)) {\r\n            devicesFiltered.push(device);\r\n          }\r\n        }\r\n\r\n        station.devicesFiltered = devicesFiltered;\r\n\r\n        var popupContent = {\r\n          station: station,\r\n          deviceNumberViewLimit: $scope.deviceNumberViewLimit,\r\n          goto: $scope.goto,\r\n          showMore: function (stationName) {\r\n            $scope.goto(\"stationDetails/\" + stationName + \"/list/devices/map\");\r\n          }\r\n        };\r\n\r\n        var stationStatus = getStationStatus(station);\r\n\r\n        markers[stationName] = {\r\n          lat: lat,\r\n          lng: lng,\r\n          title: stationDisplayName,\r\n          icon: {\r\n            type: 'div',\r\n            iconSize: [40, 40],\r\n            html: '<div><span><b>' + stationStatus.code + '</b></span></div>',\r\n            className: 'marker-cluster ' + stationStatus.class,\r\n            popupAnchor: [0, 0]\r\n          },\r\n          popupTemplate: popupStationTemplate,\r\n          popupContent: popupContent,\r\n          private: station\r\n        };\r\n\r\n      }\r\n\r\n      angular.forEach(station.devices, function (device) {\r\n\r\n        // Prepera the device filtered list\r\n        if (checkFilters(device)) {\r\n          devices.push(device);\r\n        }\r\n\r\n        // Prepare the current screenshot for the devices\r\n        deviceScreenshotIds[device.name] = $scope.deviceScreenshotIds[device.name] || 0;\r\n\r\n        // Prepare the checkbox models for the devices\r\n        deviceCheckedIds[device.name] = $scope.deviceCheckedIds[device.name] || false;\r\n\r\n        // Prepare the random values for the devices\r\n        deviceRandom[device.name] = $scope.deviceRandom[device.name] || new Date().getTime();\r\n\r\n      });\r\n\r\n    });\r\n\r\n\r\n    $scope.mapMarkers = markers;\r\n    $scope.devices = devices;\r\n\r\n    $scope.deviceScreenshotIds = deviceScreenshotIds;\r\n    $scope.deviceCheckedIds = deviceCheckedIds;\r\n    $scope.deviceRandom = deviceRandom;\r\n\r\n    if ($scope.dynamicItems == null) {\r\n      $scope.dynamicItems = new DynamicItems($scope.devices);\r\n    } else {\r\n      $scope.dynamicItems.reset($scope.devices);\r\n    }\r\n\r\n    $scope.dataHasLoaded = true;\r\n  };\r\n\r\n\r\n  function setFilterData(filters, isActive) {\r\n    $scope.isFilterActive = isActive;\r\n    $scope.filters = filters;\r\n\r\n    if (lastSyncRequestDataStr) {\r\n      clearDeviceIdList();\r\n      refresh(JSON.parse(lastSyncRequestDataStr));\r\n    }\r\n  };\r\n\r\n\r\n  function showScreenshot(deviceName, idx) {\r\n    $scope.deviceRandom[deviceName] = new Date().getTime();\r\n    $scope.deviceScreenshotIds[deviceName] = idx;\r\n  };\r\n\r\n};\r\n","controllersDomain.controller('GroupsController', GroupsController);\r\n\r\n/* @ngInject */\r\nfunction GroupsController(APPLICATION_EVENTS, $scope, $rootScope, $log, $filter, groupsService, $mdSidenav, $mdDialog) {\r\n\r\n  var groupModelIntitial = { name: \"\" };\r\n\r\n\r\n  /**\r\n   * BINDINGS\r\n   ************************************************/\r\n\r\n  $scope.addGroup = addGroup;\r\n  $scope.deleteGroup = deleteGroup;\r\n  $scope.disableFabToolbar = disableFabToolbar;\r\n  $scope.editGroupNavClose = editGroupNavClose;\r\n  $scope.editGroupNavOpen = editGroupNavOpen;\r\n  $scope.enableFabToolbar = enableFabToolbar;\r\n  $scope.groupModel = angular.copy(groupModelIntitial);\r\n  $scope.handleSubmit = handleSubmit;\r\n  $scope.isFormSubmitting = false;\r\n  $scope.isOpen = false;\r\n  $scope.isUpdate = false;\r\n  $scope.pageTitle = 'GROUPS';\r\n  $scope.query = { order: 'name', limit: 10, page: 1 };\r\n  $scope.refreshGroups = refreshGroups;\r\n  $scope.selected = [];\r\n  $scope.selectedMode = 'md-scale';\r\n  $scope.showConfirm = showConfirm;\r\n  $scope.updateGroup = updateGroup;\r\n\r\n\r\n  activate();\r\n\r\n\r\n  /**\r\n   * FUNCTIONS\r\n   ************************************************/\r\n\r\n  function activate() {\r\n    $scope.setCurrentNavBarItem('groups'); // defined in application controller\r\n    $scope.setSummaryData(null);\r\n    $scope.refreshGroups(); // Call refreshUsers for the page first loading\r\n  }\r\n\r\n  function addGroup() {\r\n    $scope.isUpdate = false;\r\n    $scope.editGroupNavOpen();\r\n  };\r\n\r\n  function deleteGroup() {\r\n    groupsService.deleteGroups($scope.selected)\r\n      .then(function (data) {\r\n        $rootScope.$broadcast(APPLICATION_EVENTS.appSuccessNotify, { message: \"GROUP_DELETED\" });\r\n        $scope.refreshGroups();\r\n      })\r\n      .catch(function (err) {\r\n        $log.error(err);\r\n        $rootScope.$broadcast(APPLICATION_EVENTS.appErrorNotify, { message: err.data.error, description: err.data.description });\r\n      });\r\n  };\r\n\r\n  function disableFabToolbar() {\r\n    $scope.isOpen = false;\r\n  };\r\n\r\n  function editGroupNavClose() {\r\n    $scope.groupForm.$setUntouched();\r\n    $scope.groupForm.$setPristine();\r\n    $scope.groupModel = angular.copy(groupModelIntitial);\r\n    $mdSidenav('edit-group-nav')\r\n      .close()\r\n      .then(function () {\r\n        isOpen = false;\r\n      })\r\n  };\r\n\r\n  function editGroupNavOpen() {\r\n    $scope.disableFabToolbar();\r\n    $mdSidenav('edit-group-nav').toggle()\r\n  };\r\n\r\n  function enableFabToolbar() {\r\n    $scope.isOpen = true;\r\n  };\r\n\r\n  function handleSubmit() {\r\n\r\n    $scope.isFormSubmitting = true;\r\n\r\n    if ($scope.isUpdate) {\r\n      var payload = {\r\n        \"groupId\": $scope.selected[0],\r\n        \"group\": $scope.groupModel\r\n      }\r\n      groupsService.updateGroup(payload)\r\n        .then(function (data) {\r\n          $scope.isFormSubmitting = false;\r\n          $rootScope.$broadcast(APPLICATION_EVENTS.appSuccessNotify, { message: \"GROUP_UPDATED\" });\r\n          $scope.isUpdate = false;\r\n          $scope.editGroupNavClose();\r\n          $scope.refreshGroups();\r\n        })\r\n        .catch(function (err) {\r\n          $log.error(err);\r\n          $scope.isFormSubmitting = false;\r\n          $rootScope.$broadcast(APPLICATION_EVENTS.appErrorNotify, { message: err.data.error, description: err.data.description });\r\n        });\r\n    } else {\r\n      groupsService.createGroup($scope.groupModel)\r\n        .then(function (data) {\r\n          $scope.isFormSubmitting = false;\r\n          $rootScope.$broadcast(APPLICATION_EVENTS.appSuccessNotify, { message: \"GROUP_CREATED\" });\r\n          $scope.editGroupNavClose();\r\n          $scope.refreshGroups();\r\n        })\r\n        .catch(function (err) {\r\n          $log.error(err);\r\n          $scope.isFormSubmitting = false;\r\n          $rootScope.$broadcast(APPLICATION_EVENTS.appErrorNotify, { message: err.data.error, description: err.data.description });\r\n        });\r\n    }\r\n  };\r\n\r\n  function refreshGroups() {\r\n    // Clear current selected groups\r\n    $scope.selected = [];\r\n    // When we open the section we want to retrieve the list of groups\r\n    groupsService.listGroups()\r\n      .then(function (data) {\r\n        $scope.groups = data.groups;\r\n      })\r\n      .catch(function (err) {\r\n        $log.error(err);\r\n        $rootScope.$broadcast(APPLICATION_EVENTS.appErrorNotify, { message: err.data.error, description: err.data.description });\r\n      });\r\n  };\r\n\r\n  function showConfirm(ev) {\r\n    // Appending dialog to document.body to cover sidenav in docs app\r\n    var confirm = $mdDialog.confirm()\r\n      .title($filter('translate')('DELETE_CONFIRM_TITLE'))\r\n      .textContent($filter('translate')('DELETE_CONFIRM_MSG'))\r\n      .ariaLabel($filter('translate')('DELETE_CONFIRM_TITLE'))\r\n      .targetEvent(ev)\r\n      .ok($filter('translate')('OK'))\r\n      .cancel($filter('translate')('CANCEL'));\r\n\r\n    $mdDialog.show(confirm)\r\n      .then(function () {\r\n        // Confirm function, call service\r\n        $scope.deleteGroup();\r\n      }, function () {\r\n        // Cancel function, do nothing\r\n      });\r\n  };\r\n\r\n  function updateGroup() {\r\n    var groupId = $scope.selected[0];\r\n    groupsService.getGroup(groupId)\r\n      .then(function (data) {\r\n        $scope.isUpdate = true;\r\n        $scope.groupModel = data.group;\r\n        $scope.editGroupNavOpen();\r\n      })\r\n      .catch(function (err) {\r\n        $log.error(err);\r\n        $rootScope.$broadcast(APPLICATION_EVENTS.appErrorNotify, { message: err.data.error, description: err.data.description });\r\n      });\r\n  };\r\n};\r\n","controllersDomain.controller('HistoryController', HistoryController);\r\n\r\n/* @ngInject */\r\nfunction HistoryController(APPLICATION_EVENTS, $scope, $rootScope, $log, kibanaService, devicesService) {\r\n\r\n  var currDate = new Date();\r\n  var fromDate = new Date(currDate.setHours(0, 0, 0, 0));\r\n  var toDate = new Date(currDate.setHours(23, 59, 59, 0));\r\n  var STATION_UNDEFINED = 'MR-UNDEFINED';\r\n\r\n  var defaultChartFilters = {\r\n    from: fromDate,\r\n    to: toDate,\r\n    device: -1,\r\n    station: -1,\r\n    template: -1\r\n  };\r\n\r\n  /**\r\n   * BINDINGS\r\n   ************************************************/\r\n\r\n  $scope.chartFilters = defaultChartFilters;\r\n  $scope.dashboardId = \"\";\r\n  $scope.dashboards = [];\r\n  $scope.devices = [];\r\n  $scope.form = {};\r\n  $scope.filterChart = filterChart;\r\n  $scope.kibanaDashUrl = \"\";\r\n  $scope.lines = [];\r\n  $scope.pageTitle = \"HISTORY\";\r\n  $scope.reset = reset;\r\n  $scope.stations = [];\r\n  $scope.templates = [];\r\n  $scope.STATION_UNDEFINED = STATION_UNDEFINED;\r\n\r\n  activate();\r\n\r\n  /**\r\n  * FUNCTIONS\r\n  ************************************************/\r\n\r\n  function activate() {\r\n    $scope.setCurrentNavBarItem('history');\r\n    $scope.setSummaryData(null);\r\n\r\n    clearForm();\r\n\r\n    // Load the available groups from the DB and initialize the poller\r\n    kibanaService\r\n      .listDashboards()\r\n      .then(function (data) {\r\n        $scope.dashboards = data.dashboards;\r\n        $scope.dashboardId = $scope.dashboards.length > 0 ? $scope.dashboards[0].id : \"\";\r\n        $scope.reset();\r\n      })\r\n      .catch(function (err) {\r\n        $log.error(err);\r\n        $rootScope.$broadcast(APPLICATION_EVENTS.appErrorNotify, { message: err.data.error, description: err.data.description });\r\n      });\r\n\r\n    devicesService.sync()\r\n      .then(function (status) {\r\n        $scope.lines = status.lines;\r\n        $scope.stations = status.stations;\r\n        $scope.templates = status.templates;\r\n\r\n        var devices = [];\r\n        angular.forEach($scope.stations, function (station) {\r\n          angular.forEach(station.devices, function (device) {\r\n            devices.push(device);\r\n          })\r\n        });\r\n\r\n        $scope.devices = devices;\r\n\r\n      })\r\n      .catch(function (err) {\r\n        $log.error(err);\r\n        $rootScope.$broadcast(APPLICATION_EVENTS.appErrorNotify, { message: err.data.error, description: err.data.description });\r\n      });\r\n  };\r\n\r\n  function clearForm() {\r\n    if ($scope.form.filtersForm) {\r\n      $scope.form.filtersForm.$setUntouched();\r\n      $scope.form.filtersForm.$setPristine();\r\n      $scope.chartFilters = angular.copy(defaultChartFilters);\r\n    }\r\n  };\r\n\r\n  function filterChart() {\r\n    var payload = $scope.chartFilters;\r\n    kibanaService.filterChart($scope.dashboardId, payload)\r\n      .then(function (data) {\r\n        $scope.kibanaDashUrl = data.iframeUrl;\r\n        renderIframe();\r\n      })\r\n      .catch(function (err) {\r\n        $log.error(err);\r\n        $rootScope.$broadcast(APPLICATION_EVENTS.appErrorNotify, { message: err.data.error, description: err.data.description });\r\n      });\r\n  };\r\n\r\n  function renderIframe() {\r\n    angular.element(document.querySelector(\"#kibana-iframe\")).remove();\r\n    var el = document.createElement('iframe');\r\n    el.src = $scope.kibanaDashUrl;\r\n    el.id = \"kibana-iframe\";\r\n    angular.element(document.querySelector(\"#kibana-iframe-container\")).html(el.outerHTML);\r\n  };\r\n\r\n  function reset() {\r\n    $scope.kibanaDashUrl = \"\";\r\n\r\n    kibanaService.getDashboardUrl($scope.dashboardId, $scope.id)\r\n      .then(function (data) {\r\n        $scope.kibanaDashUrl = data.iframeUrl;\r\n        clearForm();\r\n        renderIframe();\r\n      })\r\n      .catch(function (err) {\r\n        $log.error(err);\r\n        $rootScope.$broadcast(APPLICATION_EVENTS.appErrorNotify, { message: err.data.error, description: err.data.description });\r\n      });\r\n  };\r\n};\r\n","controllersDomain.controller('LoginController', LoginController);\r\n\r\n/* @ngInject */\r\nfunction LoginController($rootScope, $scope, $location, $route, $log, AUTH_EVENTS, AuthService, APPLICATION_EVENTS) {\r\n\r\n  /**\r\n   * BINDINGS\r\n   ************************************************/\r\n\r\n  $scope.credentials = {\r\n    username: \"\",\r\n    password: \"\"\r\n  };\r\n  $scope.submitForm = submitForm;\r\n\r\n\r\n  /**\r\n   * FUNCTIONS\r\n   ************************************************/\r\n\r\n  function submitForm() {\r\n    AuthService.login($scope.credentials)\r\n      .then(function (user) {\r\n        $rootScope.$broadcast(AUTH_EVENTS.loginSuccess);\r\n        $scope.setCurrentUser(user); // Defined in ApplicationCtrl\r\n      }, function (err) {\r\n        $rootScope.$broadcast(APPLICATION_EVENTS.appErrorNotify, { message: err.data.error, description: err.data.description });\r\n      });\r\n  };\r\n};\r\n","controllersDomain.controller('NavbarController', NavbarController);\r\n\r\n/* @ngInject */\r\nfunction NavbarController($rootScope, $scope, $translate, AVAILABLE_LANGUAGES) {\r\n    $scope.availableLanguages = AVAILABLE_LANGUAGES;\r\n    $scope.currentLanguage = 'en';\r\n    // $scope.$watch('currentLanguage', function() {\r\n    //     $translate.use($scope.currentLanguage);\r\n    // });\r\n};\r\n","controllersDomain.controller('StationDetailController', StationDetailController);\r\n\r\n/* @ngInject */\r\nfunction StationDetailController($rootScope, $scope, $log, $mdSidenav, $mdDialog, $routeParams, $timeout, $filter,\r\n  stationsService, syncService, groupsService, popupDeviceTemplate, DynamicItems,\r\n  APPLICATION_EVENTS, WIZARD_EVENTS, SYNC_EVENTS) {\r\n\r\n  var CURRENT_VIEW_MAP = 'map';\r\n  var CURRENT_VIEW_LIST = 'list';\r\n\r\n  var lastSyncRequestDataStr = null;\r\n\r\n  /**\r\n   * BINDINGS\r\n   ************************************************/\r\n\r\n  $scope.areas = [];\r\n  $scope.currentView = $routeParams.view || CURRENT_VIEW_MAP;\r\n  $scope.CURRENT_VIEW_MAP = CURRENT_VIEW_MAP;\r\n  $scope.CURRENT_VIEW_LIST = CURRENT_VIEW_LIST;\r\n  $scope.dataHasLoaded = false;\r\n  $scope.deviceDefaults = {};\r\n  $scope.devices = [];\r\n  $scope.deleteStation = deleteStation;\r\n  $scope.dynamicItems = null;\r\n  $scope.id = $routeParams.id;\r\n  $scope.center = { lat: 50, lng: 50, zoom: 3 };\r\n  $scope.editDeviceNavClose = editDeviceNavClose;\r\n  $scope.editDeviceNavOpen = editDeviceNavOpen;\r\n  $scope.editStationNavClose = editStationNavClose;\r\n  $scope.editStationNavOpen = editStationNavOpen;\r\n  $scope.fabIsOpen = false;\r\n  $scope.fabSelectedMode = 'md-scale';\r\n  $scope.floorSelected = -1;\r\n  $scope.getCustomServiceValues = getCustomServiceValues;\r\n  $scope.getFloorMapId = getFloorMapId;\r\n  $scope.getFloorImageOverlayUrl = getFloorImageOverlayUrl;\r\n  $scope.groups = [];\r\n  $scope.lines = [];\r\n  $scope.mapId = 'stationMap_' + $scope.id;\r\n  $scope.markers = [];\r\n  $scope.returnToRoute = $routeParams.returnToRoute ?\r\n    $routeParams.returnToRouteView ? $routeParams.returnToRoute + '/' + $routeParams.returnToRouteView : $routeParams.returnToRoute :\r\n    '/stations';\r\n  $scope.station = {};\r\n  $scope.stations = [];\r\n  $scope.editStationIsOpen = false;\r\n  $scope.stationDefaults = {};\r\n  $scope.templates = [];\r\n\r\n\r\n  /**\r\n   * EVENTS\r\n   ************************************************/\r\n\r\n  var wizardSuccessListener = $scope.$on(WIZARD_EVENTS.wizardSuccess, onWizardSuccess);\r\n  var wizardFailedListener = $scope.$on(WIZARD_EVENTS.wizardFailed, onWizardFailed);\r\n  var syncSuccessListener = $scope.$on(SYNC_EVENTS.syncSuccess, onNewSyncData);\r\n  $scope.$watch('floorSelected', onFloorSelected);\r\n  $scope.$on('$destroy', destroy);\r\n\r\n\r\n  activate();\r\n\r\n\r\n  /**\r\n   * FUNCTIONS\r\n   ************************************************/\r\n\r\n  function activate() {\r\n    $scope.setCurrentNavBarItem('devices'); // defined in application controller\r\n    $scope.setSummaryData({ ok: '-', error: '-', warning: '-', maintenance: '-', lastUpdate: undefined });\r\n\r\n    // Local cached data\r\n    syncService\r\n      .getCachedSyncData()\r\n      .then(function (cachedSyncData) {\r\n        processSyncData(cachedSyncData);\r\n        if (!syncService.isSyncPollerRunning()) {\r\n          syncService.startSyncPoller();\r\n        }\r\n      })\r\n      .catch(function (err) {\r\n        $log.error(err);\r\n        $rootScope.$broadcast(APPLICATION_EVENTS.appErrorNotify, { message: err.data.error, description: err.data.description });\r\n      });\r\n\r\n    // Load the available groups from the DB and initialize the poller\r\n    groupsService.listGroups()\r\n      .then(function (data) {\r\n        $scope.groups = data.groups;\r\n      })\r\n      .catch(function (err) {\r\n        $log.error(err);\r\n        $rootScope.$broadcast(APPLICATION_EVENTS.appErrorNotify, { message: err.data.error, description: err.data.description });\r\n      });\r\n  };\r\n\r\n\r\n  function checkFloorFilters(device) {\r\n    if (angular.isUndefined($scope.floorSelected)) {\r\n      return false;\r\n    }\r\n\r\n    var visible = false;\r\n\r\n    visible = device.config.stationFloorId === $scope.floorSelected;\r\n\r\n    return visible;\r\n  };\r\n\r\n\r\n  function deleteStation($event) {\r\n\r\n    var message = $filter('translate')('WARNING_DELETE_DEVICES') + ' ' + $filter('translate')('DELETE_CONFIRM_MSG');\r\n\r\n    // Appending dialog to document.body to cover sidenav in docs app\r\n    var confirm = $mdDialog.confirm()\r\n      .title($filter('translate')('DELETE_CONFIRM_TITLE'))\r\n      .textContent(message)\r\n      .ariaLabel($filter('translate')('DELETE_CONFIRM_TITLE'))\r\n      .targetEvent($event)\r\n      .ok($filter('translate')('OK'))\r\n      .cancel($filter('translate')('CANCEL'));\r\n\r\n    $mdDialog.show(confirm).then(function () {\r\n      // Confirm function, call service\r\n      stationsService.deleteStation($scope.station.name, $scope.station)\r\n        .then(function (data) {\r\n          $rootScope.$broadcast(APPLICATION_EVENTS.appSuccessNotify, { message: 'STATION_DELETED' });\r\n\r\n          // Return to devices main/list page\r\n          $scope.goto($scope.returnToRoute);\r\n\r\n        })\r\n        .catch(function (err) {\r\n          $log.error(err);\r\n          $rootScope.$broadcast(APPLICATION_EVENTS.appErrorNotify, { message: err.data.error, description: err.data.description });\r\n        });\r\n\r\n    }, function () {\r\n      // Cancel function, do nothing\r\n    });\r\n  };\r\n\r\n\r\n  function destroy() {\r\n    wizardSuccessListener();\r\n    wizardFailedListener();\r\n    syncSuccessListener();\r\n  };\r\n\r\n\r\n  function editDeviceNavClose() {\r\n    $mdSidenav('edit-device-nav').close();\r\n  };\r\n\r\n\r\n  function editDeviceNavOpen($event) {\r\n    $event.stopImmediatePropagation(); //top the fab closing animation\r\n    $mdSidenav('edit-device-nav').open();\r\n  };\r\n\r\n\r\n  function editStationNavClose() {\r\n    $scope.stationDefaults = null;\r\n    $scope.editStationIsOpen = false;\r\n    $mdSidenav('edit-station-nav').close();\r\n  };\r\n\r\n\r\n  function editStationNavOpen($event) {\r\n    $event.stopImmediatePropagation(); //top the fab closing animation\r\n\r\n    // Load the current station data for editing\r\n    $scope.stationDefaults = angular.copy($scope.station);\r\n    $scope.editStationIsOpen = true;\r\n\r\n    // Timeout to improve animation\r\n    $timeout(function () {\r\n      $mdSidenav('edit-station-nav').open();\r\n    }, 100);\r\n  };\r\n\r\n\r\n  function getCustomServiceValues(device, serviceName) {\r\n    var services = device.services ? device.services : {};\r\n    var checkAllService = null;\r\n    for (var prop in services) {\r\n      if (services.hasOwnProperty(prop)) {\r\n        var service = services[prop];\r\n        if (service.custom) {\r\n          checkAllService = service;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    var customServiceValues = checkAllService && checkAllService.customServices ?\r\n      checkAllService.customServices.find(function (cs) { return cs.name === serviceName }) :\r\n      null;\r\n    return customServiceValues;\r\n  };\r\n\r\n\r\n  function getFloorMapId(floorId) {\r\n    var mapId = 'stationMap';\r\n\r\n    if (floorId == -1) {\r\n      return mapId;\r\n    }\r\n\r\n    return mapId + '_' + $scope.id + '_floor_' + floorId;\r\n  };\r\n\r\n\r\n  function getFloorImageOverlayUrl(floorId) {\r\n\r\n    if (floorId == -1) {\r\n      return $scope.stationImageBasePath + $scope.station.custom.position.mapUrl;\r\n    }\r\n\r\n    var floors = $scope.station.custom.floors ? $scope.station.custom.floors : [];\r\n    var floor = floors.find(function (floor) { return floor.name == floorId; });\r\n    if (!floor) {\r\n      $log.error(\"No image available for the current floor\");\r\n      return '';\r\n    }\r\n\r\n    return $scope.stationImageBasePath + floor.position.mapUrl;\r\n  };\r\n\r\n\r\n  function onFloorSelected() {\r\n    var markers = {};\r\n    angular.forEach($scope.station.devices, function (device, key) {\r\n\r\n      // check if the device is visible for the selected floor (map only)\r\n      if (checkFloorFilters(device)) {\r\n\r\n        var deviceName = device.name;\r\n        var deviceDisplayName = device.displayName;\r\n        var lat = device.config.position.lat;\r\n        var lng = device.config.position.lng;\r\n\r\n        var popupContent = {\r\n          device: device,\r\n          goto: $scope.goto\r\n        };\r\n\r\n        markers[deviceName] = {\r\n          lat: lat,\r\n          lng: lng,\r\n          title: deviceDisplayName,\r\n          icon: {\r\n            type: 'div',\r\n            iconSize: [40, 40],\r\n            html: '<div><span><b>' + (device.maintenance == false ? (device.error ? 'ERR' : (device.warning ? 'WAR' : 'OK')) : 'MT') + '</b></span></div>',\r\n            className: 'marker-cluster marker-cluster-' + (device.maintenance == false ? (device.error ? 'error' : (device.warning ? 'warning' : 'ok')) : 'maintenance'),\r\n            popupAnchor: [0, 0]\r\n          },\r\n          popupTemplate: popupDeviceTemplate,\r\n          popupContent: popupContent,\r\n          private: device\r\n        };\r\n\r\n      }\r\n    });\r\n\r\n    $scope.markers = markers;\r\n  };\r\n\r\n\r\n  function onNewSyncData($event, args) {\r\n    var data = args.data;\r\n    processSyncData(data);\r\n  };\r\n\r\n\r\n  function onWizardSuccess($event, args) {\r\n    $event.preventDefault();\r\n    $event.stopPropagation();\r\n    $rootScope.$broadcast(APPLICATION_EVENTS.appSuccessNotify, { message: args.message });\r\n\r\n    if (args.closeSideBar) {\r\n      $timeout(function () {\r\n        // Close the sidebar\r\n        $scope.editDeviceNavClose();\r\n        $scope.editStationNavClose();\r\n\r\n        syncService.updateStationCachedData(args.data); //TODO: da rivedere\r\n        syncService.restartSyncPoller();\r\n      }, 0);\r\n    }\r\n  };\r\n\r\n\r\n  function onWizardFailed($event, args) {\r\n    $event.preventDefault();\r\n    $event.stopPropagation();\r\n    $rootScope.$broadcast(APPLICATION_EVENTS.appErrorNotify, { message: args.message, description: args.description });\r\n  };\r\n\r\n\r\n  function processSyncData(data) {\r\n    // Stops if no data is available\r\n    if (!data) {\r\n      $log.debug('No data available');\r\n      $rootScope.$broadcast(APPLICATION_EVENTS.appErrorNotify, { message: 'NO_DATA_AVAILABLE' });\r\n      return;\r\n    }\r\n\r\n    // Stops if the data is not changed\r\n    var dataStr = JSON.stringify(data);\r\n    if (lastSyncRequestDataStr === dataStr) {\r\n      $log.debug('Data not changed');\r\n      return;\r\n    }\r\n\r\n    // Copy of the last data received\r\n    lastSyncRequestDataStr = dataStr;\r\n\r\n    refresh(data);\r\n  };\r\n\r\n\r\n  function refresh(status) {\r\n\r\n    $scope.setSummaryData(status.summary);\r\n\r\n    $scope.areas = status.areas;\r\n    $scope.lines = status.lines;\r\n    $scope.stations = status.stations;\r\n    $scope.templates = status.templates;\r\n\r\n    var markers = {};\r\n    var stationsTree = status.stationsTree || [];\r\n\r\n    $scope.station = angular.extend($scope.station, stationsTree[$scope.id])\r\n\r\n    var devices = [];\r\n    angular.forEach($scope.station.devices, function (device, key) {\r\n\r\n      devices.push(device);\r\n\r\n      // check if the device is visible for the selected floor (map only)\r\n      if (checkFloorFilters(device)) {\r\n\r\n        var deviceName = device.name;\r\n        var deviceDisplayName = device.displayName;\r\n        var lat = device.config.position.lat;\r\n        var lng = device.config.position.lng;\r\n\r\n        var popupContent = {\r\n          device: device,\r\n          goto: $scope.goto\r\n        };\r\n\r\n        markers[deviceName] = {\r\n          lat: lat,\r\n          lng: lng,\r\n          title: deviceDisplayName,\r\n          icon: {\r\n            type: 'div',\r\n            iconSize: [40, 40],\r\n            html: '<div><span><b>' + (device.maintenance == false ? (device.error ? 'ERR' : (device.warning ? 'WAR' : 'OK')) : 'MT') + '</b></span></div>',\r\n            className: 'marker-cluster marker-cluster-' + (device.maintenance == false ? (device.error ? 'error' : (device.warning ? 'warning' : 'ok')) : 'maintenance'),\r\n            popupAnchor: [0, 0]\r\n          },\r\n          popupTemplate: popupDeviceTemplate,\r\n          popupContent: popupContent,\r\n          private: device\r\n        };\r\n\r\n      }\r\n    });\r\n\r\n    $scope.markers = markers;\r\n    $scope.devices = devices;\r\n\r\n\r\n    // Define the device defaults with the current station information (for the device wizard)\r\n    if (stationsTree[$scope.id]) {\r\n      $scope.deviceDefaults = angular.copy(\r\n        {\r\n          config: {\r\n            stationName: $scope.id,\r\n            stationFloorId: $scope.floorSelected\r\n          }\r\n        }\r\n      );\r\n    }\r\n\r\n    if ($scope.dynamicItems == null) {\r\n      $scope.dynamicItems = new DynamicItems($scope.devices);\r\n    } else {\r\n      $scope.dynamicItems.reset($scope.devices);\r\n    }\r\n\r\n    $scope.dataHasLoaded = true;\r\n  };\r\n};\r\n","controllersDomain.controller('StationsController', StationsController);\r\n\r\n/* @ngInject */\r\nfunction StationsController($rootScope, $scope, $log, $timeout, $filter, $routeParams, $mdSidenav, $mdDialog,\r\n  stationsService, syncService, popupStationTemplate, DynamicItems,\r\n  APPLICATION_EVENTS, WIZARD_EVENTS, SYNC_EVENTS) {\r\n\r\n  var CURRENT_VIEW_MAP = 'map';\r\n  var CURRENT_VIEW_LIST = 'list';\r\n  var STATION_UNDEFINED = 'MR-UNDEFINED';\r\n\r\n  var lastSyncRequestDataStr = null;\r\n\r\n\r\n  /**\r\n   * BINDINGS\r\n   ************************************************/\r\n\r\n  $scope.currentView = $routeParams.view || CURRENT_VIEW_MAP;\r\n  $scope.CURRENT_VIEW_MAP = CURRENT_VIEW_MAP;\r\n  $scope.CURRENT_VIEW_LIST = CURRENT_VIEW_LIST;\r\n  $scope.dataHasLoaded = false;\r\n  $scope.deleteStation = deleteStation;\r\n  $scope.dynamicItems = null;\r\n  $scope.editStationNavClose = editStationNavClose;\r\n  $scope.editStationNavOpen = editStationNavOpen;\r\n  $scope.fabIsOpen = false;\r\n  $scope.fabSelectedMode = 'md-scale';\r\n  $scope.mapId = 'mainStationMap';\r\n  $scope.mapMarkers = [];\r\n  $scope.mapMarkerCluster = null;\r\n  $scope.station = {};\r\n  $scope.stationCheckedIds = {};\r\n  $scope.stations = [];\r\n  $scope.editStationIsOpen = false;\r\n  $scope.stationDefaults = null;\r\n  $scope.lines = [];\r\n  $scope.mapEditMarkers = {};\r\n\r\n\r\n  /**\r\n   * EVENTS\r\n   ************************************************/\r\n\r\n  var wizardSuccessListener = $scope.$on(WIZARD_EVENTS.wizardSuccess, onWizardSuccess);\r\n  var wizardFailedListener = $scope.$on(WIZARD_EVENTS.wizardFailed, onWizardFailed);\r\n  var syncSuccessListener = $scope.$on(SYNC_EVENTS.syncSuccess, onNewSyncData);\r\n  $scope.$on('$destroy', destroy);\r\n\r\n\r\n  activate();\r\n\r\n\r\n  /**\r\n   * FUNCTIONS\r\n   ************************************************/\r\n\r\n  function activate() {\r\n    $scope.setCurrentNavBarItem('stations'); // defined in application controller\r\n    $scope.setSummaryData({ ok: '-', error: '-', warning: '-', maintenance: '-', lastUpdate: undefined });\r\n\r\n    $scope.mapMarkerCluster = {\r\n      iconCreateFunction: function (cluster) {\r\n        var markers = cluster.getAllChildMarkers();\r\n\r\n        return new L.divIcon({\r\n          html: '<div><span><b>' + '' + '</b></span></div>',\r\n          className: 'marker-cluster marker-cluster-empty',\r\n          iconSize: new L.Point(40, 40)\r\n        });\r\n      },\r\n      clusterMouseOverFunction: function (event) {\r\n        var layer = event.layer;\r\n        var clusterStations = layer.getAllChildMarkers();\r\n\r\n        var html = \"<b>Station Cluster Detail</b><br>\";\r\n\r\n        angular.forEach(clusterStations, function (clusterStation) {\r\n          var station = clusterStation.private;\r\n\r\n          html += \"<div class='clusterDetailBox'>\";\r\n          html += \"<span>\" + station.displayName + \"</span> \";\r\n          html += \"<span class='statusCircle empty-host\" + '' + \"'></span>\";\r\n          html += \"</div>\"\r\n        });\r\n\r\n        var popup = L.popup().setContent(html);\r\n        layer.bindPopup(popup);\r\n        layer.openPopup();\r\n      },\r\n      maxClusterRadius: 80,\r\n    };\r\n\r\n    // Local cached data\r\n    syncService\r\n      .getCachedSyncData()\r\n      .then(function (cachedSyncData) {\r\n        processSyncData(cachedSyncData);\r\n        if (!syncService.isSyncPollerRunning()) {\r\n          syncService.startSyncPoller();\r\n        }\r\n      })\r\n      .catch(function (err) {\r\n        $log.error(err);\r\n        $rootScope.$broadcast(APPLICATION_EVENTS.appErrorNotify, { message: err.data.error, description: err.data.description });\r\n      });\r\n  };\r\n\r\n\r\n  function deleteStation($event, station) {\r\n\r\n    var message = $filter('translate')('WARNING_DELETE_DEVICES') + ' ' + $filter('translate')('DELETE_CONFIRM_MSG');\r\n\r\n    // Appending dialog to document.body to cover sidenav in docs app\r\n    var confirm = $mdDialog.confirm()\r\n      .title($filter('translate')('DELETE_CONFIRM_TITLE'))\r\n      .textContent(message)\r\n      .ariaLabel($filter('translate')('DELETE_CONFIRM_TITLE'))\r\n      .targetEvent($event)\r\n      .ok($filter('translate')('OK'))\r\n      .cancel($filter('translate')('CANCEL'));\r\n\r\n    $mdDialog.show(confirm).then(function () {\r\n      // Confirm function, call service\r\n      stationsService.deleteStation(station.name, station)\r\n        .then(function (data) {\r\n          $rootScope.$broadcast(APPLICATION_EVENTS.appSuccessNotify, { message: 'STATION_DELETED' });\r\n\r\n          // Refresh page data\r\n          refresh();\r\n        })\r\n        .catch(function (err) {\r\n          $log.error(err);\r\n          $rootScope.$broadcast(APPLICATION_EVENTS.appErrorNotify, { message: err.data.error, description: err.data.description });\r\n        });\r\n\r\n    }, function () {\r\n      // Cancel function, do nothing\r\n    });\r\n  };\r\n\r\n\r\n  function editStationNavClose() {\r\n    $scope.stationDefaults = null;\r\n    $scope.editStationIsOpen = false;\r\n    $mdSidenav('edit-station-nav').close();\r\n  };\r\n\r\n\r\n  function editStationNavOpen($event, name) {\r\n    $event.stopImmediatePropagation(); //top the fab closing animation\r\n\r\n    // Load the current station data for editing\r\n    $scope.stationDefaults = $scope.stations.find(function (station) {\r\n      return station.name == name;\r\n    });\r\n    $scope.editStationIsOpen = true;\r\n\r\n    // Timeout to improve animation\r\n    $timeout(function () {\r\n      $mdSidenav('edit-station-nav').open();\r\n    }, 100);\r\n  };\r\n\r\n\r\n  function destroy() {\r\n    wizardSuccessListener();\r\n    wizardFailedListener();\r\n    syncSuccessListener();\r\n  }\r\n\r\n\r\n  function onNewSyncData($event, args) {\r\n    var data = args.data;\r\n    processSyncData(data);\r\n  };\r\n\r\n\r\n  function onWizardSuccess($event, args) {\r\n    $event.preventDefault();\r\n    $event.stopPropagation();\r\n    $rootScope.$broadcast(APPLICATION_EVENTS.appSuccessNotify, { message: args.message });\r\n\r\n    if (args.closeSideBar) {\r\n      $timeout(function () {\r\n        // Close the sidebar\r\n        $scope.editStationNavClose();\r\n\r\n        syncService.updateStationCachedData(args.data); //TODO: da rivedere\r\n        syncService.restartSyncPoller();\r\n      }, 0);\r\n    }\r\n  };\r\n\r\n\r\n  function onWizardFailed($event, args) {\r\n    $event.preventDefault();\r\n    $event.stopPropagation();\r\n    $rootScope.$broadcast(APPLICATION_EVENTS.appErrorNotify, { message: args.message, description: args.description });\r\n  };\r\n\r\n\r\n  function processSyncData(data) {\r\n    // Stops if no data is available\r\n    if (!data) {\r\n      $log.debug('No data available');\r\n      $rootScope.$broadcast(APPLICATION_EVENTS.appErrorNotify, { message: 'NO_DATA_AVAILABLE' });\r\n      return;\r\n    }\r\n\r\n    // Stops if the data is not changed\r\n    var dataStr = JSON.stringify(data);\r\n    if (lastSyncRequestDataStr === dataStr) {\r\n      $log.debug('Data not changed');\r\n      return;\r\n    }\r\n\r\n    // Copy of the last data received\r\n    lastSyncRequestDataStr = dataStr;\r\n\r\n    refresh(data);\r\n  };\r\n\r\n\r\n  function refresh(status) {\r\n\r\n    $scope.setSummaryData(status.summary);\r\n\r\n    $scope.lines = status.lines;\r\n    $scope.stations = status.stations;\r\n\r\n    var stationCheckedIds = {};\r\n    var markers = {};\r\n\r\n    angular.forEach($scope.stations, function (station, key) {\r\n\r\n      station.deviceCount = Object.keys(station.devices).length;\r\n\r\n      var stationName = station.name;\r\n      var stationDisplayName = station.displayName;\r\n      var lat = station.custom.position.lat;\r\n      var lng = station.custom.position.lng;\r\n\r\n      // Rimuove la stazione *MR-UNDEFINED* dalla visualizzazione a mappa\r\n      if (stationName !== STATION_UNDEFINED) {\r\n\r\n        var popupContent = {\r\n          station: station,\r\n          goto: $scope.goto,\r\n          editStationNavOpen: $scope.editStationNavOpen,\r\n          deleteStation: $scope.deleteStation\r\n        };\r\n\r\n        markers[stationName] = {\r\n          lat: lat,\r\n          lng: lng,\r\n          title: stationDisplayName,\r\n          icon: {\r\n            type: 'div',\r\n            iconSize: [40, 40],\r\n            html: '<div><span><b>' + '' + '</b></span></div>',\r\n            className: 'marker-cluster marker-cluster-empty',\r\n            popupAnchor: [0, 0]\r\n          },\r\n          popupTemplate: popupStationTemplate,\r\n          popupContent: popupContent,\r\n          private: station\r\n        };\r\n\r\n      }\r\n    });\r\n\r\n    $scope.markers = markers;\r\n    $scope.stationCheckedIds = stationCheckedIds;\r\n\r\n    if ($scope.dynamicItems == null) {\r\n      $scope.dynamicItems = new DynamicItems($scope.stations);\r\n    } else {\r\n      $scope.dynamicItems.reset($scope.stations);\r\n    }\r\n\r\n    $scope.dataHasLoaded = true;\r\n  };\r\n};\r\n","controllersDomain.controller('UsersController', UsersController);\r\n\r\n/* @ngInject */\r\nfunction UsersController($scope, $rootScope, $mdDialog, $mdSidenav, $log, $filter, USER_ROLES, APPLICATION_EVENTS, usersService, groupsService) {\r\n\r\n  var userModelInitial = {\r\n    name: \"\",\r\n    surname: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n    idRole: null,\r\n    idGroup: null,\r\n    idRedmine: null,\r\n    idKibana: null\r\n  };\r\n\r\n\r\n  /**\r\n   * BINDINGS\r\n   ************************************************/\r\n\r\n  $scope.addUser = addUser;\r\n  $scope.deleteUser = deleteUser;\r\n  $scope.disableFabToolbar = disableFabToolbar;\r\n  $scope.editUserNavClose = editUserNavClose;\r\n  $scope.editUserNavOpen = editUserNavOpen;\r\n  $scope.enableFabToolbar = enableFabToolbar;\r\n  $scope.handleSubmit = handleSubmit;\r\n  $scope.isFormSubmitting = false;\r\n  $scope.isOpen = false;\r\n  $scope.isUpdate = false;\r\n  $scope.pageTitle = 'USERS';\r\n  $scope.query = { order: 'name', limit: 10, page: 1 };\r\n  $scope.refreshUsers = refreshUsers;\r\n  $scope.selected = [];\r\n  $scope.selectedMode = 'md-scale';\r\n  $scope.showConfirm = showConfirm;\r\n  $scope.updateUser = updateUser;\r\n  $scope.userModel = angular.copy(userModelInitial);\r\n  $scope.userRoles = USER_ROLES;\r\n\r\n\r\n  activate();\r\n\r\n\r\n  /**\r\n   * FUNCTIONS\r\n   ************************************************/\r\n\r\n  function activate() {\r\n    $scope.setCurrentNavBarItem('users'); // defined in application controller\r\n    $scope.setSummaryData(null);\r\n    $scope.refreshUsers(); // Call refreshUsers for the page first loading\r\n  }\r\n\r\n  function addUser() {\r\n    $scope.isUpdate = false;\r\n    $scope.editUserNavOpen('right');\r\n  };\r\n\r\n  function deleteUser() {\r\n    usersService.deleteUsers($scope.selected)\r\n      .then(function (data) {\r\n        $rootScope.$broadcast(APPLICATION_EVENTS.appSuccessNotify, { message: \"USER_DELETED\" });\r\n        $scope.refreshUsers();\r\n      })\r\n      .catch(function (err) {\r\n        $log.error(err);\r\n        $rootScope.$broadcast(APPLICATION_EVENTS.appErrorNotify, { message: err.data.error, description: err.data.description });\r\n        $scope.refreshUsers();\r\n      });\r\n  };\r\n\r\n  function disableFabToolbar() {\r\n    $scope.isOpen = false;\r\n  };\r\n\r\n  function editUserNavClose() {\r\n    $scope.userForm.$setUntouched();\r\n    $scope.userForm.$setPristine();\r\n    $scope.userModel = angular.copy(userModelInitial);\r\n    $mdSidenav('edit-user-nav').close();\r\n  };\r\n\r\n  function editUserNavOpen() {\r\n    $scope.userForm.$setUntouched();\r\n    $scope.userForm.$setPristine();\r\n    $mdSidenav('edit-user-nav').toggle();\r\n  };\r\n\r\n  function enableFabToolbar() {\r\n    $scope.isOpen = true;\r\n  };\r\n\r\n  function handleSubmit() {\r\n\r\n    $scope.isFormSubmitting = true;\r\n\r\n    if ($scope.isUpdate) {\r\n      var payload = {\r\n        \"userId\": $scope.selected[0],\r\n        \"user\": $scope.userModel\r\n      }\r\n      usersService.updateUser(payload)\r\n        .then(function (data) {\r\n          $scope.isFormSubmitting = false;\r\n          $rootScope.$broadcast(APPLICATION_EVENTS.appSuccessNotify, { message: \"USER_UPDATED\" });\r\n          $scope.isUpdate = false;\r\n          $scope.editUserNavClose();\r\n          $scope.refreshUsers();\r\n        })\r\n        .catch(function (err) {\r\n          $log.error(err);\r\n          $scope.isFormSubmitting = false;\r\n          $rootScope.$broadcast(APPLICATION_EVENTS.appErrorNotify, { message: err.data.error, description: err.data.description });\r\n        });\r\n    } else {\r\n      usersService.createUser($scope.userModel)\r\n        .then(function (data) {\r\n          $scope.isFormSubmitting = false;\r\n          $rootScope.$broadcast(APPLICATION_EVENTS.appSuccessNotify, { message: \"USER_CREATED\" });\r\n          $scope.editUserNavClose();\r\n          $scope.refreshUsers();\r\n        })\r\n        .catch(function (err) {\r\n          $log.error(err);\r\n          $scope.isFormSubmitting = false;\r\n          $rootScope.$broadcast(APPLICATION_EVENTS.appErrorNotify, { message: err.data.error, description: err.data.description });\r\n        });\r\n    }\r\n  };\r\n\r\n  function refreshUsers() {\r\n    // Clear current selected users\r\n    $scope.selected = [];\r\n    // When we open the section we want to retrieve the list of users\r\n    usersService.listUsers()\r\n      .then(function (data) {\r\n\r\n        $scope.users = data.users;\r\n        for (var i in data.users) {\r\n          var user = data.users[i];\r\n          switch (user.idRole) {\r\n            case $scope.userRoles.superadmin:\r\n              user.roleName = \"SuperAdmin\";\r\n              break;\r\n            case $scope.userRoles.admin:\r\n              user.roleName = \"Admin\";\r\n              break;\r\n            case $scope.userRoles.maintainer:\r\n              user.roleName = \"Maintainer\";\r\n              break;\r\n            case $scope.userRoles.operator:\r\n              user.roleName = \"Operator\";\r\n              break;\r\n            default:\r\n              user.roleName = \"-\";\r\n              break;\r\n          }\r\n        }\r\n\r\n        // Load the groups from DB so they can be printed on the table\r\n        groupsService.listGroups()\r\n          .then(function (data) {\r\n            $scope.groups = data.groups;\r\n          })\r\n          .catch(function (err) {\r\n            $log.error(err);\r\n            $rootScope.$broadcast(APPLICATION_EVENTS.appErrorNotify, { message: err.data.error, description: err.data.description });\r\n          });\r\n\r\n      }).catch(function (err) {\r\n        $log.error(err);\r\n        $rootScope.$broadcast(APPLICATION_EVENTS.appErrorNotify, { message: err.data.error, description: err.data.description });\r\n      });\r\n  };\r\n\r\n  function showConfirm(ev) {\r\n    // Appending dialog to document.body to cover sidenav in docs app\r\n    var confirm = $mdDialog.confirm()\r\n      .title($filter('translate')('DELETE_CONFIRM_TITLE'))\r\n      .textContent($filter('translate')('DELETE_CONFIRM_MSG'))\r\n      .ariaLabel($filter('translate')('DELETE_CONFIRM_TITLE'))\r\n      .targetEvent(ev)\r\n      .ok($filter('translate')('OK'))\r\n      .cancel($filter('translate')('CANCEL'));\r\n\r\n    $mdDialog.show(confirm)\r\n      .then(function () {\r\n        // Confirm function, call service\r\n        $scope.deleteUser();\r\n      }, function () {\r\n        // Cancel function, do nothing\r\n      });\r\n  };\r\n\r\n  function updateUser() {\r\n    var userId = $scope.selected[0];\r\n    usersService.getUser(userId)\r\n      .then(function (data) {\r\n        $scope.isUpdate = true;\r\n        $scope.userModel = data.user;\r\n        $scope.userModel.password = \"\";\r\n        $scope.userModel.confirmPassword = \"\";\r\n        $scope.editUserNavOpen();\r\n      })\r\n      .catch(function (err) {\r\n        $log.error(err);\r\n        $rootScope.$broadcast(APPLICATION_EVENTS.appErrorNotify, { message: err.data.error, description: err.data.description });\r\n      });\r\n  };\r\n};\r\n","var controllersDomain = angular.module('SolariMonitor.controllers', []);"]}