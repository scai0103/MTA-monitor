{"version":3,"sources":["compareTo.js","deviceBulkUpload.js","deviceFilter.js","deviceStatus.js","deviceWizard.js","errSrc.js","excludeValues.js","fileUpload.js","leaflet.js","refreshOnIdle.js","stationWizard.js","statusSummary.js","namespace.js"],"names":["compareTo","$log","link","scope","element","attrs","controller","$validators","modelValue","otherModelValue","$watch","$validate","require","deviceBulkUpload","$rootScope","$location","$timeout","$localStorage","moment","devicesService","fileUploadService","APPLICATION_EVENTS","FILE_UPLOAD_EVENTS","destroy","isReportLoading","poller","stop","fileUploadSuccessListener","fileUploadFailedListener","formatDate","dateISOStr","date","format","onUploadSuccess","$event","data","getBulkImportReportPoller","promise","then","message","status","processing","uploadReport","error","onUploadFailed","err","inputUploadElement","isFileUploading","progressValue","uploadFileName","$on","uploadSuccess","uploadFailed","restrict","uploadUrl","replace","templateUrl","deviceFilter","leafletService","clearFilters","angular","extend","filtersDefault","clearSearchTerm","searchTerm","includesOneElement","arr1","arr2","some","v","includes","watchGroupsListener","forEach","watchGroup","watchEl","idx","search","filterStations","filteredStations","stations","station","custom","lineNames","filterLineSelected","push","filterStationSelected","name","getLocalData","key","localData","sanitizeQueryParams","param","isArray","setLocalData","setMapView","latlng","zoom","mapId","getMap","map","setView","updateValues","newValues","oldValues","filters","isActive","JSON","stringify","callbackFn","filterAreaSelected","filterStatusProduction","filterStatusNoProduction","filterStatusError","filterStatusWarning","filterStatusMaintenance","filterStatusOk","linkAreaSelected","linkLineSelected","STATION_UNDEFINED","$watchGroup","val","areas","lines","quickLinksEnabled","isAuthorized","deviceStatus","services","result","find","service","isDoubleFace","isError","MODE_LIST","device","screenshotUrl","length","getDeviceStatus","address","catch","mode","deviceWizard","LEAFLET_EVENTS","WIZARD_EVENTS","PATHS","clearForm","deviceWizardForm","$setPristine","$setUntouched","leafletListener","getFloorMapId","floorId","currentStation","getFloorImageOverlayUrl","stationImageBasePath","position","mapUrl","floor","floors","handleSubmit","callbackSuccess","isFormSubmitting","tabGoTo","TAB_BASE_INDEX","$emit","wizardSuccess","closeSideBar","callbackFailure","description","wizardFailed","isNewDevice","createDevice","updateDevice","updateMarkerCoordinates","config","lat","lng","onTemplateChange","originalValue","isTemplateChanged","templateName","customFieldConfs","customFieldsValue","i","templates","template","templateFields","templateFieldsValue","os","faces","customServiceConfs","customServicesValue","templateServices","templateServicesValue","merge","onStationChange","stationName","stationFloors","getDeviceConfiguration","getDeviceConfig","displayName","serialNumber","serial","model","notes","index","tabCurrentIndex","tabGoToNext","tabMaxIndex","tabGoToPrev","excludeAddresses","excludeNames","mapEditCenter","mapEditMarkers","mapImagePath","numberPattern","TAB_CUSTOM_INDEX","TAB_MAP_INDEX","markerDragEnd","deviceDefaults","production","stationFloorId","previousTemplateName","previousStationName","maintainerGroupIds","groups","group","id","filter","title","focus","draggable","devices","trim","toLowerCase","errSrc","off","on","src","$set","excludeValues","fileUpload","onInputChange","event","files","target","$setViewValue","$invalid","upload","onProgressCallback","onLoadCallback","onErrorCallback","value","$broadcast","appErrorNotify","response","appSuccessNotify","lengthComputable","Math","round","loaded","total","isDefined","maxsize","parseInt","viewValue","isUndefined","size","accept","split","indexOf","type","leaflet","attr","remove","scopeId","updateMarkers","markersLayer","clearLayers","markers","item","marker","L","icon","divIcon","setIcon","popupHtml","popup","setContent","bindPopup","maxWidth","popupTemplate","popupContent","e","this","openPopup","getLatLng","private","addLayer","warn","saveMapState","center","crs","CRS","Simple","maxZoom","minZoom","imageOverlayUrl","img","Image","onload","ratio","width","height","bounds","setMaxBounds","imageOverlay","setOpacity","addTo","markerCluster","markerClusterGroup","clusterMouseOverFunction","FeatureGroup","getCenter","getZoom","setMap","refreshOnIdle","timeout","clearTimeout","window","removeEventListener","updateTime","refresh","Date","getTime","time","idleTime","location","reload","setTimeout","addEventListener","stationWizard","stationsService","addFloor","isNew","uploadTempFileName","undefined","floorsUploadFileName","stationWizardForm","deleteFloor","splice","deletedFloors","isNewStation","createStation","updateStation","onTabSelected","tab","isTabVisible","fileName","imageBasePath","mapEditId","tempBasePath","stationDefaults","filterable","floorDefault","isDeleted","statusSummary","directivesDomain","module","directive"],"mappings":"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","file":"../directives.min.js","sourcesContent":["directivesDomain.directive('compareTo', compareTo);\r\n\r\n/* @ngInject */\r\nfunction compareTo($log) {\r\n  return {\r\n    require: \"ngModel\",\r\n    scope: {\r\n      otherModelValue: \"=compareTo\"\r\n    },\r\n    link: link\r\n  };\r\n\r\n  function link(scope, element, attrs, controller) {\r\n    controller.$validators.compareTo = function (modelValue) {\r\n      return modelValue == scope.otherModelValue;\r\n    };\r\n\r\n    scope.$watch(\"otherModelValue\", function () {\r\n      controller.$validate();\r\n    });\r\n  };\r\n};\r\n","directivesDomain.directive('deviceBulkUpload', deviceBulkUpload);\r\n\r\n/* @ngInject */\r\nfunction deviceBulkUpload($rootScope, $location, $timeout, $log, $localStorage, moment, devicesService, fileUploadService, APPLICATION_EVENTS, FILE_UPLOAD_EVENTS) {\r\n  return {\r\n    restrict: 'E',\r\n    scope: {\r\n      uploadUrl: '='\r\n    },\r\n    replace: true,\r\n    templateUrl: '/views/devices/bulkUploadTemplate.html',\r\n    link: link\r\n  };\r\n\r\n  function link(scope, element, attrs, controller) {\r\n\r\n    var defaultUploadReport = null;\r\n    var poller = null;\r\n\r\n    /**\r\n     * BINDINGS\r\n     ************************************************/\r\n\r\n    scope.formatDate = formatDate;\r\n    scope.inputUploadElement;\r\n    scope.isFileUploading = false;\r\n    scope.isReportLoading = false;\r\n    scope.progressValue = 0;\r\n    scope.uploadFileName = null;\r\n    scope.uploadReport = defaultUploadReport;\r\n\r\n\r\n    /**\r\n     * EVENTS\r\n     ************************************************/\r\n\r\n    var fileUploadSuccessListener = scope.$on(FILE_UPLOAD_EVENTS.uploadSuccess, onUploadSuccess);\r\n    var fileUploadFailedListener = scope.$on(FILE_UPLOAD_EVENTS.uploadFailed, onUploadFailed);\r\n    scope.$on('$destroy', destroy);\r\n\r\n\r\n    active();\r\n\r\n\r\n    /**\r\n     * FUNCTIONS\r\n     ************************************************/\r\n\r\n    function active() {\r\n    };\r\n\r\n\r\n    function destroy() {\r\n      scope.isReportLoading = false;\r\n\r\n      if (poller) {\r\n        poller.stop();\r\n        poller = null;\r\n      }\r\n\r\n      fileUploadSuccessListener();\r\n      fileUploadFailedListener();\r\n    };\r\n\r\n\r\n    function formatDate(dateISOStr) {\r\n      var date = moment(dateISOStr);\r\n      return date ? date.format('MM/DD/YYYY HH:mm') : '';\r\n    };\r\n\r\n\r\n    function onUploadSuccess($event, data) {\r\n      $timeout(function () {\r\n        // POLLER\r\n        scope.isReportLoading = true;\r\n\r\n        if (poller == null) {\r\n          poller = devicesService.getBulkImportReportPoller();\r\n          poller.promise\r\n            .then(null, null, function (message) {\r\n\r\n              if (message.status !== 200) {\r\n                $log.error(message);\r\n                return\r\n              }\r\n\r\n              var data = message.data;\r\n              if (data.processing == false) {\r\n                scope.uploadReport = data;\r\n\r\n                if (poller) {\r\n                  poller.stop();\r\n                  poller = null;\r\n                }\r\n\r\n                scope.isReportLoading = false;\r\n              }\r\n\r\n            });\r\n        }\r\n      }, 0);\r\n    };\r\n\r\n\r\n    function onUploadFailed(err) {\r\n      $timeout(function () {\r\n        scope.isReportLoading = false;\r\n      }, 0);\r\n    };\r\n  };\r\n};\r\n","directivesDomain.directive('deviceFilter', deviceFilter);\r\n\r\n/* @ngInject */\r\nfunction deviceFilter($location, $timeout, $log, $localStorage, leafletService) {\r\n  return {\r\n    restrict: 'E',\r\n    scope: {\r\n      mapId: '=',\r\n      areas: '=',\r\n      lines: \"=\",\r\n      stations: '=',\r\n      callbackFn: '&',\r\n      quickLinksEnabled: '=',\r\n      isAuthorized: '=authorized'\r\n    },\r\n    replace: true,\r\n    templateUrl: '/views/devices/filterTemplate.html',\r\n    link: link\r\n  };\r\n\r\n  function link(scope, element, attrs, controller) {\r\n\r\n    var STATION_UNDEFINED = 'MR-UNDEFINED';\r\n\r\n    var filtersDefault = {\r\n      filterAreaSelected: null,\r\n      filterLineSelected: [],\r\n      filterStationSelected: [],\r\n      filterStatusProduction: true,\r\n      filterStatusNoProduction: true,\r\n      filterStatusError: true,\r\n      filterStatusWarning: true,\r\n      filterStatusMaintenance: true,\r\n      filterStatusOk: true\r\n    };\r\n    var watchGroup = ['filterAreaSelected', 'filterStationSelected', 'filterLineSelected', 'filterStatusProduction', 'filterStatusNoProduction', 'filterStatusError', 'filterStatusWarning', 'filterStatusMaintenance', 'filterStatusOk'];\r\n\r\n    /**\r\n     * BINDINGS\r\n     ************************************************/\r\n\r\n    scope.clearFilters = clearFilters;\r\n    scope.clearSearchTerm = clearSearchTerm;\r\n    scope.filterAreaSelected;\r\n    scope.filteredStations = [];\r\n    scope.filterLineSelected = [];\r\n    scope.filterStations = filterStations;\r\n    scope.filterStationSelected = [];\r\n    scope.filterStatusProduction;\r\n    scope.filterStatusError;\r\n    scope.filterStatusWarning;\r\n    scope.filterStatusMaintenance;\r\n    scope.filterStatusOk;\r\n    scope.linkAreaSelected;\r\n    scope.linkLineSelected;\r\n    scope.setMapView = setMapView;\r\n    scope.searchTerm;\r\n    scope.STATION_UNDEFINED = STATION_UNDEFINED;\r\n\r\n    angular.extend(scope, filtersDefault);\r\n\r\n    var watchGroupsListener = scope.$watchGroup(watchGroup, updateValues);\r\n\r\n    scope.$on('$destroy', destroy);\r\n\r\n    active();\r\n\r\n\r\n    /**\r\n     * FUNCTIONS\r\n     ************************************************/\r\n\r\n    function active() {\r\n\r\n      // Get the filters from localStorage\r\n      angular.extend(scope, getLocalData('filters'));\r\n\r\n      // Preserve the filters from the URL\r\n      angular.forEach(watchGroup, function (watchEl, idx) {\r\n        var val = $location.search()[watchEl];\r\n        if (val) {\r\n          val = sanitizeQueryParams(val, watchEl);\r\n          scope[watchEl] = val;\r\n        }\r\n      });\r\n    }\r\n\r\n\r\n    function clearFilters() {\r\n      angular.extend(scope, filtersDefault);\r\n    };\r\n\r\n\r\n    function clearSearchTerm() {\r\n      scope.searchTerm = '';\r\n    };\r\n\r\n\r\n    function includesOneElement(arr1, arr2) {\r\n      return arr1.some(function (v) {\r\n        return arr2.includes(v);\r\n      });\r\n    }\r\n\r\n\r\n    function destroy() {\r\n      // De-registration function for all listeners.\r\n      watchGroupsListener();\r\n\r\n      angular.forEach(watchGroup, function (watchEl, idx) {\r\n        $location.search(watchEl, null);\r\n      });\r\n    };\r\n\r\n\r\n    function filterStations() {\r\n      var filteredStations = [];\r\n      angular.forEach(scope.stations, function (station, idx) {\r\n        if (station.custom.lineNames && includesOneElement(station.custom.lineNames, scope.filterLineSelected)) {\r\n          filteredStations.push(station);\r\n        }\r\n      });\r\n\r\n      var filterStationSelected = [];\r\n      angular.forEach(filteredStations, function (station, idx) {\r\n        if (scope.filterStationSelected.includes(station.name)) {\r\n          filterStationSelected.push(station.name);\r\n        }\r\n      });\r\n\r\n      scope.filteredStations = filteredStations;\r\n      scope.filterStationSelected = filterStationSelected;\r\n    }\r\n\r\n\r\n    function getLocalData(key, localData) {\r\n      if (!$localStorage['filterData']) {\r\n        $localStorage['filterData'] = {};\r\n      }\r\n\r\n      return $localStorage['filterData'][key];\r\n    };\r\n\r\n\r\n    function sanitizeQueryParams(param, key) {\r\n\r\n      if (key == \"filterLineSelected\" || key == \"filterStationSelected\") {\r\n        if (!angular.isArray(param)) {\r\n          param = [param];\r\n        }\r\n      } else {\r\n        if (param == \"false\") {\r\n          param = false;\r\n        }\r\n\r\n        if (param == \"true\") {\r\n          param = true;\r\n        }\r\n      }\r\n\r\n      return param;\r\n    };\r\n\r\n\r\n    function setLocalData(key, localData) {\r\n      if (!$localStorage['filterData']) {\r\n        $localStorage['filterData'] = {};\r\n      }\r\n\r\n      $localStorage['filterData'][key] = localData;\r\n    };\r\n\r\n\r\n    function setMapView(latlng, zoom) {\r\n      // if mapId parameter is defined\r\n      if (scope.mapId) {\r\n        leafletService\r\n          .getMap(scope.mapId)\r\n          .then(function (map) {\r\n            map.setView(latlng, zoom);\r\n          });\r\n      }\r\n    };\r\n\r\n\r\n    function updateValues(newValues, oldValues, scope) {\r\n\r\n      $timeout(function () {\r\n        var filters = {};\r\n        var isActive = false;\r\n        angular.forEach(watchGroup, function (watchEl, idx) {\r\n          filters[watchEl] = newValues[idx];\r\n          $location.search(watchEl, newValues[idx]);\r\n\r\n          isActive = isActive || JSON.stringify(filtersDefault[watchEl]) !== JSON.stringify(filters[watchEl]);\r\n        });\r\n\r\n        setLocalData('filters', filters);\r\n\r\n        // Call controller callback function\r\n        if (scope.callbackFn) {\r\n          scope.callbackFn({ filters: filters, isActive: isActive });\r\n        }\r\n\r\n      }, 0);\r\n\r\n    };\r\n\r\n  }\r\n};\r\n","directivesDomain.directive('deviceStatus', deviceStatus);\r\n\r\n/* @ngInject */\r\nfunction deviceStatus($location, $timeout, $log, $localStorage, $rootScope, devicesService, APPLICATION_EVENTS) {\r\n  return {\r\n    restrict: 'E',\r\n    scope: {\r\n      device: '=',\r\n      mode: '=?'\r\n    },\r\n    replace: true,\r\n    templateUrl: '/views/devices/statusTemplate.html',\r\n    link: link\r\n  };\r\n\r\n  function link(scope, element, attrs, controller) {\r\n\r\n    var MODE_LIST = 'list';\r\n\r\n    /**\r\n     * BINDINGS\r\n     ************************************************/\r\n\r\n    scope.isDoubleFace = false;\r\n    scope.isError = false;\r\n    scope.MODE_LIST = MODE_LIST;\r\n    scope.search = search;\r\n    scope.status = {};\r\n\r\n    activate();\r\n\r\n\r\n    /**\r\n     * FUNCTIONS\r\n     ************************************************/\r\n\r\n    function activate() {\r\n\r\n      scope.isDoubleFace = scope.device.custom.screenshotUrl.length > 1;\r\n\r\n      devicesService\r\n        .getDeviceStatus(scope.device.address)\r\n        .then(function (data) {\r\n          scope.status = data;\r\n        })\r\n        .catch(function (err) {\r\n          $log.error(err);\r\n          scope.isError = true;\r\n          // $rootScope.$broadcast(APPLICATION_EVENTS.appErrorNotify, { message: err.data.error, description: err.data.description });\r\n        });\r\n    };\r\n\r\n    function search(services, key) {\r\n      var result = null;\r\n\r\n      if (services && key) {\r\n        result = services.find(function (service) {\r\n          return service.name == key;\r\n        })\r\n      }\r\n\r\n      return result;\r\n    }\r\n\r\n  };\r\n\r\n};\r\n","directivesDomain.directive('deviceWizard', deviceWizard);\r\n\r\n/* @ngInject */\r\nfunction deviceWizard($rootScope, $log, $timeout, devicesService, LEAFLET_EVENTS, WIZARD_EVENTS, PATHS) {\r\n  return {\r\n    restrict: 'E',\r\n    scope: {\r\n      deviceDefaults: '=?',\r\n      groups: '=',\r\n      devices: '=',\r\n      stations: '=',\r\n      templates: '=',\r\n      isAuthorized: '=authorized'\r\n    },\r\n    replace: true,\r\n    templateUrl: '/views/devices/wizardTemplate.html',\r\n    link: link\r\n  };\r\n\r\n  function link(scope, element, attrs, controller) {\r\n\r\n    var TAB_BASE_INDEX = 0;\r\n    var TAB_MAP_INDEX = 1;\r\n    var TAB_CUSTOM_INDEX = 2;\r\n\r\n    var STATION_UNDEFINED = 'MR-UNDEFINED';\r\n\r\n    /**\r\n     * BINDINGS\r\n     ************************************************/\r\n\r\n    scope.clearForm = clearForm;\r\n    scope.currentStation = null;\r\n    scope.customFieldConfs = [];\r\n    scope.customServiceConfs = [];\r\n    scope.device = {};\r\n    scope.excludeAddresses = [];\r\n    scope.excludeNames = [];\r\n    scope.getDeviceConfiguration = getDeviceConfiguration;\r\n    scope.handleSubmit = handleSubmit;\r\n    scope.isFormSubmitting = false;\r\n    scope.isNewDevice = true;\r\n    scope.getFloorMapId = getFloorMapId;\r\n    scope.getFloorImageOverlayUrl = getFloorImageOverlayUrl;\r\n\r\n    scope.mapEditCenter = { lat: 50, lng: 50, zoom: 1 };\r\n    scope.mapEditMarkers = {};\r\n    scope.mapImagePath = PATHS.mapImagePath;\r\n    scope.numberPattern = /^-?[0-9]+([.][0-9]+)?$/;\r\n    scope.onStationChange = onStationChange;\r\n    scope.onTemplateChange = onTemplateChange;\r\n\r\n    scope.TAB_BASE_INDEX = TAB_BASE_INDEX;\r\n    scope.TAB_CUSTOM_INDEX = TAB_CUSTOM_INDEX;\r\n    scope.TAB_MAP_INDEX = TAB_MAP_INDEX;\r\n    scope.tabCurrentIndex = 0;\r\n    scope.tabMaxIndex = 2;\r\n    scope.tabGoTo = tabGoTo;\r\n    scope.tabGoToNext = tabGoToNext;\r\n    scope.tabGoToPrev = tabGoToPrev;\r\n    scope.STATION_UNDEFINED = STATION_UNDEFINED;\r\n    scope.stationImageBasePath = PATHS.stationImageBasePath;\r\n    scope.stationFloors = [];\r\n\r\n    var leafletListener = scope.$on(LEAFLET_EVENTS.markerDragEnd, updateMarkerCoordinates);\r\n\r\n    scope.$on('$destroy', destroy);\r\n\r\n    activate();\r\n\r\n\r\n    /**\r\n     * FUNCTIONS\r\n     ************************************************/\r\n\r\n    function activate() {\r\n      var deviceDefaults = {\r\n        config: {\r\n          production: true,\r\n          position: {\r\n            displayName: \"device\",\r\n            lat: 50,\r\n            lng: 50\r\n          },\r\n          stationFloorId: -1\r\n        },\r\n        previousTemplateName: null,\r\n        previousStationName: null\r\n      };\r\n\r\n      if (scope.deviceDefaults && scope.deviceDefaults.name) {\r\n        scope.isNewDevice = false;\r\n      }\r\n\r\n      angular.merge(scope.device, deviceDefaults, scope.deviceDefaults);\r\n\r\n      // Solo se è un nuovo dispositivo preseleziono tutti i gruppi\r\n      if (scope.isNewDevice) {\r\n        scope.device.config.maintainerGroupIds = scope.groups.map(function (group) {\r\n          return group.id;\r\n        });\r\n      }\r\n      else {\r\n        scope.device.previousTemplateName = scope.device.config.templateName;\r\n        scope.device.previousStationName = scope.device.config.stationName;\r\n\r\n        // controllo che i gruppi selezionati esistano ancora\r\n        var groups = scope.groups.filter(function(group) {\r\n          return scope.device.config.maintainerGroupIds.includes(group.id);\r\n        });\r\n\r\n        scope.device.config.maintainerGroupIds = groups.map(function (group) {\r\n          return group.id;\r\n        });\r\n      }\r\n\r\n      scope.mapEditMarkers['device'] = {\r\n        lat: scope.device.config.position.lat,\r\n        lng: scope.device.config.position.lng,\r\n        title: scope.device.config.position.displayName,\r\n        focus: true,\r\n        draggable: true\r\n      };\r\n\r\n      angular.forEach(scope.devices, function (device) {\r\n        if (device.address != scope.device.address) {\r\n          scope.excludeAddresses.push(device.address.trim().toLowerCase());\r\n        }\r\n        if (device.displayName != scope.device.displayName) {\r\n          scope.excludeNames.push(device.displayName.trim().toLowerCase());\r\n        }\r\n      });\r\n\r\n      onTemplateChange(scope.device.config.templateName);\r\n      onStationChange(scope.device.config.stationName);\r\n    };\r\n\r\n\r\n    function clearForm() {\r\n      // Reset form and disable error messages\r\n      scope.device = {};\r\n      scope.deviceWizardForm.$setPristine();\r\n      scope.deviceWizardForm.$setUntouched();\r\n    };\r\n\r\n\r\n    function destroy() {\r\n      leafletListener();\r\n    }\r\n\r\n\r\n    function getFloorMapId(floorId) {\r\n      var station = scope.currentStation;\r\n      var mapId = 'editMap';\r\n\r\n      if (!station) {\r\n        $log.error(\"No station found\");\r\n        return '';\r\n      }\r\n\r\n      if (floorId == -1) {\r\n        return mapId;\r\n      }\r\n\r\n      return mapId + '_' + station.name + '_floor_' + floorId;\r\n    };\r\n\r\n\r\n    function getFloorImageOverlayUrl(floorId) {\r\n      var station = scope.currentStation;\r\n\r\n      if (!station) {\r\n        $log.error(\"No station found\");\r\n        return '';\r\n      }\r\n\r\n      if (floorId == -1) {\r\n        return scope.stationImageBasePath + station.custom.position.mapUrl;\r\n      }\r\n\r\n      var floors = station.custom.floors ? station.custom.floors : [];\r\n      var floor = floors.find(function (floor) { return floor.name == floorId; });\r\n      if (!floor) {\r\n        $log.error(\"No image available for the current floor\");\r\n        return '';\r\n      }\r\n\r\n      return scope.stationImageBasePath + floor.position.mapUrl;\r\n    };\r\n\r\n\r\n    function handleSubmit() {\r\n\r\n      scope.isFormSubmitting = true;\r\n\r\n      if (scope.isNewDevice) {\r\n        devicesService.createDevice(scope.device)\r\n          .then(function (data) {\r\n            callbackSuccess(data, 'DEVICE_CREATED');\r\n          })\r\n          .catch(function (err) {\r\n            $log.error(err);\r\n            callbackFailure(err, err.data.error, err.data.description);\r\n          });\r\n\r\n      } else {\r\n        devicesService.updateDevice(scope.device.name, scope.device)\r\n          .then(function (data) {\r\n            callbackSuccess(data, 'DEVICE_UPDATED');\r\n          })\r\n          .catch(function (err) {\r\n            callbackFailure(err, err.data.error, err.data.description)\r\n          });\r\n      }\r\n\r\n\r\n      function callbackSuccess(data, message) {\r\n        scope.isFormSubmitting = false;\r\n        scope.tabGoTo(scope.TAB_BASE_INDEX);\r\n        scope.clearForm();\r\n        scope.$emit(WIZARD_EVENTS.wizardSuccess, { data: data, message: message, closeSideBar: true });\r\n      }\r\n\r\n      function callbackFailure(err, message, description) {\r\n        $log.error(err);\r\n        scope.isFormSubmitting = false;\r\n        scope.$emit(WIZARD_EVENTS.wizardFailed, { message: message, description: description });\r\n      }\r\n\r\n    };\r\n\r\n\r\n    function updateMarkerCoordinates($event, data) {\r\n      $timeout(function () {\r\n        scope.device.config.position.lat = data.position.lat;\r\n        scope.device.config.position.lng = data.position.lng;\r\n      }, 0);\r\n    };\r\n\r\n\r\n    function onTemplateChange(originalValue) {\r\n\r\n      if (!scope.device || !scope.device.config) {\r\n        return;\r\n      }\r\n\r\n      var isTemplateChanged = originalValue != scope.device.config.templateName;\r\n\r\n      var customFieldConfs = [];\r\n      var customFieldsValue = {};\r\n      var templateName = scope.device.config.templateName;\r\n      for (var i = 0; i < scope.templates.length; i++) {\r\n        var template = scope.templates[i];\r\n        if (template.name == templateName) {\r\n          customFieldConfs = template.custom.templateFields;\r\n          customFieldsValue = template.config ? template.config.templateFieldsValue : {};\r\n          scope.device.os = template.os;\r\n          scope.device.faces = template.faces;\r\n          break;\r\n        }\r\n      }\r\n      scope.customFieldConfs = customFieldConfs;\r\n\r\n      // Se è un nuovo dispositivo pre-imposto i valori del template\r\n      if (scope.isNewDevice || isTemplateChanged) {\r\n        scope.device.config.templateFieldsValue = customFieldsValue;\r\n      }\r\n\r\n      var customServiceConfs = [];\r\n      var customServicesValue = {};\r\n      var templateName = scope.device.config.templateName;\r\n      for (var i = 0; i < scope.templates.length; i++) {\r\n        var template = scope.templates[i];\r\n        if (template.name == templateName) {\r\n          customServiceConfs = template.custom.templateServices;\r\n          customServicesValue = template.config ? template.config.templateServicesValue : {};\r\n          break;\r\n        }\r\n      }\r\n      scope.customServiceConfs = customServiceConfs;\r\n\r\n      // Se è un nuovo dispositivo pre-imposto i valori del template\r\n      if (scope.isNewDevice || isTemplateChanged) {\r\n        scope.device.config.templateServicesValue = customServicesValue;\r\n      }\r\n      else {\r\n        scope.device.config.templateServicesValue = angular.merge({}, customServicesValue, scope.device.config.templateServicesValue);\r\n      }\r\n    };\r\n\r\n\r\n    function onStationChange(originalValue) {\r\n\r\n      if (!scope.device || !scope.device.config) {\r\n        return;\r\n      }\r\n\r\n      var stationName = scope.device.config.stationName;\r\n      var floors = [];\r\n      for (var i = 0; i < scope.stations.length; i++) {\r\n        var station = scope.stations[i];\r\n        if (station.name == stationName) {\r\n          scope.currentStation = station;\r\n          floors = station.custom.floors;\r\n          break;\r\n        }\r\n      }\r\n      scope.stationFloors = floors;\r\n    };\r\n\r\n\r\n    function getDeviceConfiguration() {\r\n      var address = scope.device.address;\r\n      devicesService.getDeviceConfig(address)\r\n        .then(function (data) {\r\n          scope.device.displayName = data.name;\r\n          scope.device.config.serialNumber = data.serial;\r\n          scope.device.config.model = data.model;\r\n          scope.device.notes = data.notes;\r\n\r\n          scope.$emit(WIZARD_EVENTS.wizardSuccess, { message: 'DEVICE_CONFIGURATED' });\r\n        })\r\n        .catch(function (err) {\r\n          $log.error(err);\r\n\r\n          scope.$emit(WIZARD_EVENTS.wizardFailed, { message: err.data.error, description: err.data.description });\r\n        });\r\n    };\r\n\r\n\r\n    function tabGoTo(index) {\r\n      scope.tabCurrentIndex = index;\r\n    };\r\n\r\n\r\n    function tabGoToNext() {\r\n      var index = (scope.tabCurrentIndex == scope.tabMaxIndex) ? 0 : scope.tabCurrentIndex + 1;\r\n      scope.tabCurrentIndex = index;\r\n    };\r\n\r\n\r\n    function tabGoToPrev() {\r\n      var index = (scope.tabCurrentIndex == 0) ? 0 : scope.tabCurrentIndex - 1;\r\n      scope.tabCurrentIndex = index;\r\n    };\r\n  }\r\n\r\n};\r\n","directivesDomain.directive('errSrc', errSrc);\r\n\r\n/* @ngInject */\r\nfunction errSrc() {\r\n  return {\r\n    restrict: 'A',\r\n    link: link\r\n  };\r\n\r\n  function link(scope, element, attrs, controller) {\r\n\r\n    scope.$on('$destroy', function () {\r\n      element.off('error');\r\n    });\r\n\r\n    element.on('error', function () {\r\n      if (attrs.src != attrs.errSrc) {\r\n        attrs.$set('src', attrs.errSrc);\r\n      }\r\n    });\r\n  }\r\n};\r\n","directivesDomain.directive('excludeValues', excludeValues);\r\n\r\n/* @ngInject */\r\nfunction excludeValues($log) {\r\n  return {\r\n    require: \"ngModel\",\r\n    scope: {\r\n      excludeValues: \"=excludeValues\"\r\n    },\r\n    link: link\r\n  };\r\n\r\n  function link(scope, element, attrs, controller) {\r\n    controller.$validators.excludeValues = function (modelValue) {\r\n      return modelValue ? !scope.excludeValues.includes(modelValue.trim().toLowerCase()) : true;\r\n    };\r\n\r\n    scope.$watch(\"excludeValues\", function () {\r\n      controller.$validate();\r\n    });\r\n  };\r\n};\r\n","directivesDomain.directive('fileUpload', fileUpload);\r\n\r\n/* @ngInject */\r\nfunction fileUpload($rootScope, $location, $timeout, $log, $localStorage, fileUploadService, APPLICATION_EVENTS, FILE_UPLOAD_EVENTS) {\r\n  return {\r\n    restrict: 'E',\r\n    scope: {\r\n      idx: '@',\r\n      name: '@?',\r\n      uploadUrl: '=',\r\n      accept: '@?'\r\n    },\r\n    replace: true,\r\n    templateUrl: '/views/fileUploadTemplate.html',\r\n    require: 'ngModel',\r\n    link: link\r\n  };\r\n\r\n  function link(scope, element, attrs, controller) {\r\n\r\n    /**\r\n     * BINDINGS\r\n     ************************************************/\r\n\r\n    scope.inputUploadElement;\r\n    scope.isFileUploading = false;\r\n    scope.name = angular.isDefined(scope.name) ? scope.name : 'upload-input';\r\n    scope.progressValue = 0;\r\n\r\n\r\n    /**\r\n     * EVENTS\r\n     ************************************************/\r\n\r\n    scope.$on('$destroy', destroy);\r\n\r\n\r\n    active();\r\n\r\n\r\n    /**\r\n     * FUNCTIONS\r\n     ************************************************/\r\n\r\n    function active() {\r\n\r\n      var inputUploadElement = element.find('input');\r\n      if (!inputUploadElement) {\r\n        return;\r\n      }\r\n\r\n      scope.inputUploadElement = inputUploadElement;\r\n\r\n      // listen to the 'change' event of the file input\r\n      inputUploadElement.on('change', onInputChange);\r\n\r\n      // add file maxsize validator\r\n      if (attrs.maxsize) {\r\n        var maxsize = parseInt(attrs.maxsize);\r\n        controller.$validators.maxsize = function (modelValue, viewValue) {\r\n          var value = modelValue || viewValue;\r\n          if (angular.isUndefined(value) || value === null) {\r\n            return true;\r\n          }\r\n          for (var i = value.length - 1; i >= 0; i--) {\r\n            if (value[i] && value[i].size && value[i].size > maxsize) {\r\n              return false;\r\n            }\r\n          }\r\n          return true;\r\n        };\r\n      }\r\n\r\n      // add file accept validator\r\n      if (attrs.accept) {\r\n        var accept = attrs.accept.split(',').map(function (val) { return val.trim(); });\r\n        controller.$validators.accept = function (modelValue, viewValue) {\r\n          var value = modelValue || viewValue;\r\n          if (angular.isUndefined(value) || value === null) {\r\n            return true;\r\n          }\r\n          for (var i = value.length - 1; i >= 0; i--) {\r\n            if (value[i] && accept.indexOf(value[i].type) === -1) {\r\n              return false;\r\n            }\r\n          }\r\n          return true;\r\n        };\r\n      }\r\n    };\r\n\r\n\r\n    function destroy() {\r\n      scope.isFileUploading = false;\r\n      scope.progressValue = 0;\r\n\r\n      if (scope.inputUploadElement) {\r\n        scope.inputUploadElement.off('change');\r\n      }\r\n    };\r\n\r\n\r\n    function onInputChange(event) {\r\n      // reset the progress bar\r\n      scope.progressValue = 0;\r\n\r\n      var files = event.target ? event.target.files : [];\r\n      controller.$setViewValue(files, event);\r\n\r\n      if (!controller.$invalid && files.length > 0) {\r\n        fileUploadService.upload(scope.uploadUrl, files, onProgressCallback, onLoadCallback, onErrorCallback)\r\n        scope.isFileUploading = true;\r\n      }\r\n    };\r\n\r\n\r\n    function onErrorCallback(err) {\r\n      $timeout(function () {\r\n        scope.$emit(FILE_UPLOAD_EVENTS.uploadFailed, { idx: scope.idx, name: scope.name, message: err.data.error, description: err.data.description });\r\n\r\n        controller.$setViewValue(null);\r\n        scope.inputUploadElement[0].value = \"\";\r\n        scope.isFileUploading = false;\r\n        $rootScope.$broadcast(APPLICATION_EVENTS.appErrorNotify, { message: err.data.error, description: err.data.description });\r\n      }, 0);\r\n    };\r\n\r\n\r\n    function onLoadCallback(response) {\r\n      $timeout(function () {\r\n        scope.$emit(FILE_UPLOAD_EVENTS.uploadSuccess, { idx: scope.idx, name: scope.name, response: response });\r\n\r\n        scope.inputUploadElement[0].value = \"\";\r\n        scope.isFileUploading = false;\r\n        $rootScope.$broadcast(APPLICATION_EVENTS.appSuccessNotify, { message: 'FILE_UPLOADED' });\r\n      }, 0);\r\n    };\r\n\r\n\r\n    function onProgressCallback(event) {\r\n      $timeout(function () {\r\n        var progressValue = 0;\r\n        if (event.lengthComputable) {\r\n          progressValue = Math.round(event.loaded / event.total * 100);\r\n        }\r\n\r\n        scope.progressValue = progressValue;\r\n      }, 0);\r\n    };\r\n  };\r\n\r\n};\r\n","directivesDomain.directive('leaflet', leaflet);\r\n\r\n/* @ngInject */\r\nfunction leaflet($rootScope, $location, $timeout, $log, $localStorage, leafletService, LEAFLET_EVENTS) {\r\n  return {\r\n    restrict: 'E',\r\n    scope: {\r\n      mapId: '=',\r\n      center: '=',\r\n      imageOverlayUrl: '=',\r\n      markers: '=',\r\n      markerCluster: '=',\r\n      saveMapState: '='\r\n    },\r\n    replace: true,\r\n    template: '<div class=\"map\"></div>',\r\n    link: link\r\n  };\r\n\r\n  function link(scope, element, attr, controller) {\r\n\r\n    var saveMapState = scope.saveMapState;\r\n    var scopeId = scope.mapId;\r\n    var map = null;\r\n    var markersLayer = null;\r\n\r\n    scope.$watch('markers', updateMarkers);\r\n\r\n    scope.$on('$destroy', destroy);\r\n\r\n    active();\r\n\r\n\r\n    /**\r\n     * FUNCTIONS\r\n     ************************************************/\r\n\r\n    function active() {\r\n\r\n      // Get the coordinates (latlng and zoom) from defaults <= directive <= localStorage\r\n      var center = { lat: 50, lng: 50, zoom: 4 };\r\n      angular.extend(center, scope.center);\r\n\r\n      if (saveMapState) {\r\n        angular.extend(center, getLocalData('center'));\r\n      }\r\n\r\n      // DM 04/07/208: tolto in quanto inefficiente e può dare problemi di performance/memoria\r\n      // Preserve the coordinates (latlng and zoom) from the URL\r\n      // if (!$rootScope.isIE11) {\r\n      //   var searchObject = $location.search();\r\n      //   if (saveMapState && searchObject.lat && searchObject.lng && searchObject.zoom) {\r\n      //     angular.extend(center, {\r\n      //       lat: parseFloat(searchObject.lat),\r\n      //       lng: parseFloat(searchObject.lng),\r\n      //       zoom: parseInt(searchObject.zoom)\r\n      //     });\r\n      //   }\r\n      // }\r\n\r\n      map = L.map(element[0], {\r\n        crs: L.CRS.Simple,\r\n        maxZoom: 7,\r\n        minZoom: 3,\r\n      });\r\n\r\n      // Check if image overlay URL is defined\r\n      if (scope.imageOverlayUrl) {\r\n        var img = new Image();\r\n        img.onload = function (e) {\r\n          var width = this.width;\r\n          var height = this.height;\r\n          var ratio = (width / height);\r\n          var bounds = [\r\n            [0, 0],\r\n            [100, 100 * ratio]\r\n          ];\r\n\r\n          // var southWest = map.unproject([0, height], map.getZoom());\r\n          // var northEast = map.unproject([width, -height], map.getZoom());\r\n          // var bounds = new L.LatLngBounds(southWest, northEast);\r\n          // map.setMaxBounds(bounds);\r\n\r\n          map.setView([center.lat, center.lng * ratio], center.zoom);\r\n          map.setMaxBounds(bounds);\r\n\r\n          var image = L.imageOverlay(scope.imageOverlayUrl, bounds)\r\n            .setOpacity(0.9)\r\n            .addTo(map);\r\n        }\r\n\r\n        img.src = scope.imageOverlayUrl;\r\n      } else {\r\n        $log.error('directive:leaflet: No \"imageOverlayUrl\" defined');\r\n      }\r\n\r\n      var markerCluster = scope.markerCluster;\r\n      if (markerCluster) {\r\n        markersLayer = L.markerClusterGroup(markerCluster);\r\n\r\n        if (markerCluster.clusterMouseOverFunction) {\r\n          markersLayer.on('clustermouseover', markerCluster.clusterMouseOverFunction);\r\n        }\r\n      } else {\r\n        markersLayer = new L.FeatureGroup();\r\n      }\r\n\r\n      map.addLayer(markersLayer);\r\n\r\n      // map.on('click', function (e) {\r\n      //   console.log(\"click LATLNG\", e.latlng);\r\n      //   console.log(\"click POINT\", map.project(e.latlng));\r\n      // });\r\n\r\n      map.on('moveend', function (e) {\r\n        // DM 04/07/208: tolto in quanto inefficiente e può dare problemi di performance/memoria\r\n        // $timeout(function () {\r\n\r\n        //   if (saveMapState) {\r\n        //     var lat = map.getCenter().lat;\r\n        //     var lng = map.getCenter().lng;\r\n        //     var zoom = map.getZoom();\r\n\r\n        //     if (!$rootScope.isIE11) {\r\n        //       $location.search('lat', lat);\r\n        //       $location.search('lng', lng);\r\n        //       $location.search('zoom', zoom);\r\n        //     }\r\n\r\n        //     setLocalData('center', { lat: lat, lng: lng, zoom: zoom });\r\n        //   }\r\n\r\n        // }, 0);\r\n\r\n        if (saveMapState) {\r\n          var lat = map.getCenter().lat;\r\n          var lng = map.getCenter().lng;\r\n          var zoom = map.getZoom();\r\n          setLocalData('center', { lat: lat, lng: lng, zoom: zoom });\r\n        }\r\n\r\n      });\r\n\r\n      // Export the map object\r\n      leafletService.setMap(map, scopeId);\r\n\r\n    };\r\n\r\n    function destroy() {\r\n\r\n      // DM 04/07/208: tolto in quanto inefficiente e può dare problemi di performance/memoria\r\n      // if (saveMapState) {\r\n      //   if (!$rootScope.isIE11) {\r\n      //     $location.search('lat', null);\r\n      //     $location.search('lng', null);\r\n      //     $location.search('zoom', null);\r\n      //   }\r\n      // }\r\n\r\n      map.remove();\r\n      map = null;\r\n    };\r\n\r\n    function getLocalData(key) {\r\n      if (!$localStorage['leafletData_' + scopeId]) {\r\n        $localStorage['leafletData_' + scopeId] = {};\r\n      }\r\n\r\n      return $localStorage['leafletData_' + scopeId][key];\r\n    };\r\n\r\n    function setLocalData(key, localData) {\r\n      if (!$localStorage['leafletData_' + scopeId]) {\r\n        $localStorage['leafletData_' + scopeId] = {};\r\n      }\r\n\r\n      $localStorage['leafletData_' + scopeId][key] = localData;\r\n    };\r\n\r\n    function updateMarkers() {\r\n\r\n      if (!markersLayer) {\r\n        $log.warn(\"leafletDirective: MarkerLayer not ready\");\r\n        return;\r\n      }\r\n\r\n      markersLayer.clearLayers();\r\n\r\n      angular.forEach(scope.markers, function (item, key) {\r\n\r\n        var marker = L.marker([item.lat, item.lng], {\r\n          title: item.title,\r\n          draggable: item.draggable || false,\r\n          focus: item.focus || false\r\n        });\r\n\r\n        if (item.icon) {\r\n          var icon = null;\r\n          switch (item.icon.type) {\r\n            case 'div':\r\n              icon = L.divIcon(item.icon);\r\n              break;\r\n            default:\r\n              icon = L.icon(item.icon);\r\n          }\r\n\r\n          marker.setIcon(icon);\r\n        }\r\n\r\n        if (item.popupHtml) {\r\n          var popup = L.popup().setContent(item.popupHtml);\r\n          marker.bindPopup(popup, { maxWidth: \"auto\" });\r\n        }\r\n        else if (item.popupTemplate) {\r\n          var popup = L.popup.angular({\r\n            template: item.popupTemplate,\r\n          }).setContent(item.popupContent);\r\n\r\n          marker.bindPopup(popup, { maxWidth: \"auto\" });\r\n        }\r\n\r\n        marker.on('mouseover', function (e) {\r\n          this.openPopup();\r\n        });\r\n\r\n        if (item.draggable) {\r\n          marker.on('dragend', function (event) {\r\n            var marker = event.target;\r\n            var position = marker.getLatLng();\r\n            scope.$emit(LEAFLET_EVENTS.markerDragEnd, { marker: marker, position: position });\r\n          });\r\n        }\r\n\r\n        marker.private = item.private;\r\n\r\n        markersLayer.addLayer(marker);\r\n\r\n      });\r\n    };\r\n\r\n  }\r\n\r\n}\r\n","directivesDomain.directive('refreshOnIdle', refreshOnIdle);\r\n\r\n/* @ngInject */\r\nfunction refreshOnIdle() {\r\n  return {\r\n    restrict: 'A',\r\n    link: link\r\n  };\r\n\r\n  function link(scope, element, attrs, controller) {\r\n    var idleTime = 1 * 60 * 1000;\r\n    var checkTime = 10 * 60 * 1000;\r\n    var time = new Date().getTime();\r\n    var timeout = null;\r\n\r\n\r\n    /**\r\n     * EVENTS\r\n     ************************************************/\r\n\r\n    scope.$on('$destroy', destroy);\r\n\r\n\r\n    /**\r\n     * FUNCTIONS\r\n     ************************************************/\r\n\r\n    function destroy() {\r\n      if(timeout) {\r\n        clearTimeout(timeout);\r\n        timeout = null;\r\n      }\r\n\r\n      window.removeEventListener(\"focus\", updateTime, false);\r\n      window.removeEventListener(\"blur\", updateTime, false);\r\n      window.removeEventListener(\"click\", updateTime, false);\r\n      window.removeEventListener(\"mousemove\", updateTime, false);\r\n      window.removeEventListener(\"keypress\", updateTime, false);\r\n    };\r\n\r\n    function refresh() {\r\n      // Se non ho fatto niente per più di *idleTime* (1min)\r\n      if (new Date().getTime() - time >= idleTime) {\r\n        window.location.reload(true);\r\n        return;\r\n      }\r\n\r\n      // Ricontrolla fra *idleTime* (1min)\r\n      timeout = setTimeout(refresh, idleTime);\r\n    };\r\n\r\n    function updateTime() {\r\n      time = new Date().getTime();\r\n    };\r\n\r\n\r\n    // Controlla fra *checkTime* (10min)\r\n    timeout = setTimeout(refresh, checkTime);\r\n\r\n    window.addEventListener(\"focus\", updateTime, false);\r\n    window.addEventListener(\"blur\", updateTime, false);\r\n    window.addEventListener(\"click\", updateTime, false);\r\n    window.addEventListener(\"mousemove\", updateTime, false);\r\n    window.addEventListener(\"keypress\", updateTime, false);\r\n  }\r\n};\r\n","directivesDomain.directive('stationWizard', stationWizard);\r\n\r\n/* @ngInject */\r\nfunction stationWizard($rootScope, $log, $timeout, stationsService, LEAFLET_EVENTS, WIZARD_EVENTS, FILE_UPLOAD_EVENTS, PATHS) {\r\n  return {\r\n    restrict: 'E',\r\n    scope: {\r\n      stationDefaults: '=?',\r\n      lines: '=',\r\n      stations: '='\r\n    },\r\n    replace: true,\r\n    templateUrl: '/views/stations/wizardTemplate.html',\r\n    link: link\r\n  };\r\n\r\n  function link(scope, element, attrs, controller) {\r\n\r\n    var TAB_BASE_INDEX = 0;\r\n\r\n    /**\r\n     * BINDINGS\r\n     ************************************************/\r\n\r\n    scope.addFloor = addFloor;\r\n    scope.clearForm = clearForm;\r\n    scope.deleteFloor = deleteFloor;\r\n    scope.excludeNames = [];\r\n    scope.handleSubmit = handleSubmit;\r\n    scope.imageBasePath = PATHS.imageBasePath;\r\n    scope.isFormSubmitting = false;\r\n    scope.isNewStation = true;\r\n    scope.isTabVisible = false;\r\n    scope.floorsUploadFileName = [];\r\n    scope.mapEditCenter = { lat: 50, lng: 50, zoom: 1 };\r\n    scope.mapEditId = 'editStationMap';\r\n    scope.mapEditMarkers = {};\r\n    scope.mapImagePath = PATHS.mapImagePath;\r\n    scope.onTabSelected = onTabSelected;\r\n    scope.station = {};\r\n    scope.stationImageBasePath = PATHS.stationImageBasePath;\r\n    scope.TAB_BASE_INDEX = TAB_BASE_INDEX;\r\n    scope.tabCurrentIndex = 0;\r\n    scope.tempBasePath = PATHS.tempBasePath;\r\n    scope.uploadUrl = 'stations/image/upload';\r\n    scope.uploadFileName = undefined;\r\n\r\n\r\n    /**\r\n     * EVENTS\r\n     ************************************************/\r\n\r\n    var leafletListener = scope.$on(LEAFLET_EVENTS.markerDragEnd, updateMarkerCoordinates);\r\n    var fileUploadSuccessListener = scope.$on(FILE_UPLOAD_EVENTS.uploadSuccess, onUploadSuccess);\r\n    scope.$on('$destroy', destroy);\r\n\r\n\r\n    activate();\r\n\r\n\r\n    /**\r\n     * FUNCTIONS\r\n     ************************************************/\r\n\r\n    function addFloor() {\r\n      var idx = scope.station.custom.floors.length;\r\n      scope.station.custom.floors.push({\r\n        isNew: true,\r\n        position: {\r\n          displayName: \"Floor \" + (idx + 1),\r\n          lat: scope.station.custom.position.lat,\r\n          lng: scope.station.custom.position.lng\r\n        },\r\n        uploadTempFileName: undefined\r\n      });\r\n\r\n      scope.floorsUploadFileName[idx] = undefined;\r\n    };\r\n\r\n    function activate() {\r\n\r\n      var stationDefaults = {\r\n        custom: {\r\n          position: {\r\n            displayName: \"station\",\r\n            lat: 50,\r\n            lng: 50\r\n          },\r\n          type: \"LEVEL2\",\r\n          filterable: true,\r\n          floors: [],\r\n          deletedFloors: []\r\n        },\r\n        uploadTempFileName: undefined\r\n      };\r\n\r\n      if (scope.stationDefaults && scope.stationDefaults.name) {\r\n        scope.isNewStation = false;\r\n      }\r\n\r\n      angular.merge(scope.station, stationDefaults, scope.stationDefaults);\r\n\r\n      // Recreate the floor object\r\n      angular.forEach(scope.station.custom.floors, function (floor, idx) {\r\n        var floorDefault = {\r\n          isNew: false,\r\n          isDeleted: false,\r\n          position: {\r\n            displayName: \"Floor \" + (idx + 1),\r\n            lat: scope.station.custom.position.lat,\r\n            lng: scope.station.custom.position.lng\r\n          },\r\n          uploadTempFileName: undefined\r\n        };\r\n        floor = angular.merge(floor, floorDefault);\r\n        scope.floorsUploadFileName[idx] = undefined;\r\n      });\r\n\r\n      scope.mapEditMarkers['station'] = {\r\n        lat: scope.station.custom.position.lat,\r\n        lng: scope.station.custom.position.lng,\r\n        title: scope.station.custom.position.displayName,\r\n        focus: true,\r\n        draggable: true\r\n      };\r\n\r\n      angular.forEach(scope.stations, function (station) {\r\n        if (station.displayName != scope.station.displayName) {\r\n          scope.excludeNames.push(station.displayName.trim().toLowerCase());\r\n        }\r\n      });\r\n\r\n    };\r\n\r\n\r\n    function clearForm() {\r\n      // Reset form and disable error messages\r\n      scope.station = {};\r\n      scope.stationWizardForm.$setPristine();\r\n      scope.stationWizardForm.$setUntouched();\r\n    };\r\n\r\n\r\n    function deleteFloor(idx) {\r\n      if (scope.station.custom.floors.length > idx) {\r\n        var floor = scope.station.custom.floors[idx];\r\n        scope.station.custom.floors.splice(idx, 1);\r\n        scope.floorsUploadFileName.splice(idx, 1);\r\n\r\n        // Mantengo un array dei piani cancellati in modo che il server possa fare pulizia\r\n        if (!floor.isNew) {\r\n          scope.station.deletedFloors.push(floor);\r\n        }\r\n\r\n        delete scope.stationWizardForm['uploadInput-' + idx];\r\n      }\r\n    }\r\n\r\n\r\n    function destroy() {\r\n      leafletListener();\r\n      fileUploadSuccessListener();\r\n    }\r\n\r\n\r\n    function handleSubmit() {\r\n\r\n      scope.isFormSubmitting = true;\r\n\r\n      if (scope.isNewStation) {\r\n        stationsService.createStation(scope.station)\r\n          .then(function (data) {\r\n            callbackSuccess(data, 'STATION_CREATED');\r\n          })\r\n          .catch(function (err) {\r\n            $log.error(err);\r\n            callbackFailure(err, err.data.error, err.data.description);\r\n          });\r\n\r\n      } else {\r\n        stationsService.updateStation(scope.station.name, scope.station)\r\n          .then(function (data) {\r\n            callbackSuccess(data, 'STATION_UPDATED');\r\n          })\r\n          .catch(function (err) {\r\n            callbackFailure(err, err.data.error, err.data.description);\r\n          });\r\n      }\r\n\r\n\r\n      function callbackSuccess(data, message) {\r\n        scope.isFormSubmitting = false;\r\n        scope.clearForm();\r\n        scope.$emit(WIZARD_EVENTS.wizardSuccess, { data: data, message: message, closeSideBar: true });\r\n      }\r\n\r\n      function callbackFailure(err, message, description) {\r\n        $log.error(err);\r\n        scope.isFormSubmitting = false;\r\n        scope.$emit(WIZARD_EVENTS.wizardFailed, { message: message, description: description });\r\n      }\r\n    };\r\n\r\n\r\n    function onTabSelected(tab) {\r\n      $timeout(function() {\r\n        scope.isTabVisible = true;\r\n      }, 100);\r\n    }\r\n\r\n\r\n    function onUploadSuccess($event, data) {\r\n      if (data) {\r\n        var idx = data.idx;\r\n        var floor = idx == -1 ? scope.station : scope.station.custom.floors[idx];\r\n        var response = data.response;\r\n\r\n        if (response && response.data) {\r\n          floor.uploadTempFileName = response.data.fileName;\r\n        }\r\n        else {\r\n          floor.uploadTempFileName = undefined;\r\n        }\r\n      }\r\n    };\r\n\r\n\r\n    function updateMarkerCoordinates($event, data) {\r\n      $timeout(function () {\r\n        scope.station.custom.position.lat = data.position.lat;\r\n        scope.station.custom.position.lng = data.position.lng;\r\n      }, 0);\r\n    };\r\n\r\n  };\r\n\r\n};\r\n","directivesDomain.directive('statusSummary', statusSummary);\r\n\r\n/* @ngInject */\r\nfunction statusSummary($location, $timeout, $log, $rootScope, APPLICATION_EVENTS) {\r\n  return {\r\n    restrict: 'E',\r\n    scope: {\r\n      data: '='\r\n    },\r\n    replace: true,\r\n    templateUrl: '/views/summaryTemplate.html',\r\n    link: link\r\n  };\r\n\r\n  function link(scope, element, attrs, controller) {\r\n\r\n  };\r\n};\r\n","var directivesDomain = angular.module('SolariMonitor.directives', []);"]}