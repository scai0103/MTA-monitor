{"version":3,"sources":["auditLog.js","authentication.js","batch.js","devices.js","fileUpload.js","groups.js","httpInterceptor.js","kibana.js","leaflet.js","poller.js","stations.js","sync.js","tickets.js","users.js","namespace.js","config.js"],"names":["AuditLogService","$rootScope","$log","$http","$interval","$q","deleteAuditLogs","dateStart","dateEnd","method","url","endpoint","headers","Content-Type","then","response","data","catch","e","errorHandler","getAuditLogs","get","serviceActionName","newMessage","error","description","detail","statusText","reject","AuthService","$window","$localStorage","getCurrentUserInner","user","authService","login","payload","post","logout","location","href","getCurrentUser","when","isAuthenticated","isAuthorized","authorizedRoles","angular","isArray","indexOf","idRole","BacthService","pollerService","BATCH_EVENTS","checkBatchStatus","batchData","getLocalBatchData","startBatchPoller","id","destroyBatchPoller","batchPoller","stop","getBatchStatus","timeout","cache","initBatchPoller","poll","batch","total","completed","failed","setLocalBatchData","$broadcast","statusSuccess","Date","createdAt","statusFailed","message","localData","start","DevicesService","poller","sync","getDevice","getDevices","createDevice","updateDevice","put","deleteDevice","Content-type","getDeviceConfig","address","getDeviceLog","getDeviceStatus","getMaintenance","getBulkImportReport","getBulkImportReportPoller","delay","catchError","smart","argumentsArray","scheduleMaintenance","removeMaintenance","sendCommand","updateDevices","fileUploadService","responseJSON","upload","files","onProgressCallback","onLoadCallback","onErrorCallback","length","formData","FormData","i","file","append","name","xhr","XMLHttpRequest","onprogress","onload","status","responseText","JSON","parse","onerror","open","send","groupsService","listGroups","getGroup","groupId","createGroup","updateGroup","requestBody","deleteGroups","groupsIds","groupIds","dataHttpInterceptor","AUTH_EVENTS","APPLICATION_EVENTS","request","config","appLoading","loading","isIE11","requestError","rejection","canRecover","responseOrNewPromise","responseError","401","notAuthenticated","403","notAuthorized","kibanaService","listDashboards","getDashboardUrl","dashboardId","deviceId","apiURL","filterChart","leafletService","_createDeferred","type","scopeId","deferredList","deferredMap","defer","_getDeferred","getMap","promise","setMap","map","resolve","PollerService","successCallback","errorCallback","pollerInterval","requestTimeout","Poller","options","this","interval","isRequestPendeing","setOptions","prototype","execute","self","isFunction","cancel","restart","StationsService","createStation","deleteStation","readStation","listStations","updateStation","SyncService","SYNC_EVENTS","getCachedSyncData","cachedSyncData","getSyncData","setCachedSyncData","initSyncPoller","syncPoller","syncFailed","isSyncPollerRunning","restartSyncPoller","syncData","lastUpdateDate","summary","lastUpdate","cacheDate","syncSuccess","startSyncPoller","stopSyncPoller","updateDeviceCachedData","devices","device","extend","stationTree","stationsTree","stationName","deviceTree","updateStationCachedData","stations","station","ticketsService","createTicket","getTickets","getTicket","ticketId","updateTicket","deleteTicket","ticketIds","userIds","usersService","createUser","listUsers","getUser","userId","updateUser","deleteUsers","usersIds","servicesDomain","module","factory","$httpProvider","useApplyAsync","interceptors","push"],"mappings":"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","file":"../services.min.js","sourcesContent":["servicesDomain.factory('auditLogService', AuditLogService);\r\n\r\n/* @ngInject */\r\nfunction AuditLogService($rootScope, $log, $http, $interval, $q) {\r\n  var endpoint = '/auditLogs';\r\n  var auditLogService = {\r\n    deleteAuditLogs: deleteAuditLogs,\r\n    getAuditLogs: getAuditLogs\r\n  };\r\n\r\n  return auditLogService;\r\n\r\n  /**\r\n   * FUNCTIONS\r\n   ************************************************/\r\n\r\n  function deleteAuditLogs(dateStart, dateEnd) {\r\n    return $http({\r\n      method: 'DELETE',\r\n      url: endpoint + '?dateStart=' + dateStart + '&dateEnd=' + dateEnd,\r\n      headers: { 'Content-Type': 'application/json;charset=utf-8' }\r\n    })\r\n      .then(function (response) { return response.data; })\r\n      .catch(function (e) { return errorHandler(e, 'deleteAuditLogs'); });\r\n  };\r\n\r\n  function getAuditLogs(dateStart, dateEnd) {\r\n    return $http.get(endpoint + '?dateStart=' + dateStart + '&dateEnd=' + dateEnd)\r\n      .then(function (response) { return response.data; })\r\n      .catch(function (e) { return errorHandler(e, 'getAuditLogs'); });\r\n  };\r\n\r\n  function errorHandler(e, serviceActionName) {\r\n    var newMessage = 'XHR Failed for ' + serviceActionName;\r\n    if (e.data && e.data.error) {\r\n      newMessage = newMessage + '\\n' + e.data.error;\r\n    }\r\n    if (e.data && e.data.description) {\r\n      newMessage = newMessage + '\\n' + e.data.description;\r\n    }\r\n    if (e.data) {\r\n      e.data.detail = newMessage;\r\n    } else {\r\n      e.data = {\r\n        error: \"SERVER_ERROR\",\r\n        description: e.statusText\r\n      };\r\n    }\r\n    $log.error(newMessage);\r\n    return $q.reject(e);\r\n  };\r\n};\r\n","servicesDomain.factory('AuthService', AuthService);\r\n\r\n/* @ngInject */\r\nfunction AuthService($log, $http, $window, $localStorage, $q) {\r\n  var authService = {};\r\n\r\n  authService.login = function (payload) {\r\n    return $http.post('/login', payload)\r\n      .then(function (response) {\r\n        return $localStorage.user = response.data.user;\r\n      })\r\n      .catch(function (e) { return errorHandler(e, 'login'); });\r\n  };\r\n\r\n  authService.logout = function () {\r\n    delete $localStorage.user;\r\n    $window.location.href = '/logout';\r\n  };\r\n\r\n  authService.getCurrentUser = function() {\r\n    if ($localStorage.user) {\r\n      return $q.when($localStorage.user);\r\n    } else {\r\n      return getCurrentUserInner();\r\n    }\r\n  };\r\n\r\n  authService.isAuthenticated = function () {\r\n    return !!$localStorage.user;\r\n  };\r\n\r\n  authService.isAuthorized = function (authorizedRoles) {\r\n    if (!angular.isArray(authorizedRoles)) {\r\n      authorizedRoles = [authorizedRoles];\r\n    }\r\n    return (authService.isAuthenticated() &&\r\n      authorizedRoles.indexOf($localStorage.user.idRole) !== -1);\r\n  }\r\n\r\n  function errorHandler(e, serviceActionName) {\r\n    var newMessage = 'XHR Failed for ' + serviceActionName;\r\n    if (e.data && e.data.error) {\r\n      newMessage = newMessage + '\\n' + e.data.error;\r\n    }\r\n    if (e.data && e.data.description) {\r\n      newMessage = newMessage + '\\n' + e.data.description;\r\n    }\r\n    if (e.data) {\r\n      e.data.detail = newMessage;\r\n    } else {\r\n      e.data = {\r\n        error: \"SERVER_ERROR\",\r\n        description: e.statusText\r\n      };\r\n    }\r\n    $log.error(newMessage);\r\n    return $q.reject(e);\r\n  }\r\n\r\n  return authService;\r\n\r\n  function getCurrentUserInner() {\r\n    return $http.get('/profile')\r\n      .then(function (response) {\r\n        return $localStorage.user = response.data.user;\r\n      })\r\n      .catch(function (e) { return errorHandler(e, 'getCurrentUser'); });\r\n  };\r\n}\r\n","servicesDomain.factory('bacthService', BacthService);\r\n\r\nvar batchPoller = null;\r\n\r\n/* @ngInject */\r\nfunction BacthService($rootScope, $log, $http, $q, $localStorage, pollerService, BATCH_EVENTS) {\r\n  var endpoint = '/devices';\r\n  var batchService = {\r\n    checkBatchStatus: checkBatchStatus,\r\n    getBatchStatus: getBatchStatus,\r\n    getLocalBatchData: getLocalBatchData,\r\n    setLocalBatchData: setLocalBatchData\r\n  };\r\n\r\n  return batchService;\r\n\r\n  function checkBatchStatus() {\r\n    var batchData = getLocalBatchData();\r\n    if (!batchData) {\r\n      destroyBatchPoller();\r\n      return;\r\n    }\r\n\r\n    startBatchPoller(batchData.id);\r\n    return;\r\n  };\r\n\r\n  function destroyBatchPoller() {\r\n    if (!batchPoller) {\r\n      return;\r\n    }\r\n\r\n    batchPoller.stop();\r\n    batchPoller = null;\r\n    return;\r\n  }\r\n\r\n  function getBatchStatus(id) {\r\n    return $http.get(endpoint + '/update/multiple/' + id, { timeout: 10000, cache: false })\r\n      .then(function (response) {\r\n        return response.data;\r\n      })\r\n      .catch(function (e) { return errorHandler(e, 'getBatchStatus'); });\r\n  };\r\n\r\n  function getLocalBatchData() {\r\n    return $localStorage['batchData'];\r\n  };\r\n\r\n  function initBatchPoller(id) {\r\n    if (batchPoller) {\r\n      return;\r\n    }\r\n\r\n    var pollerInterval = 10000;\r\n    var requestTimeout = 5000;\r\n\r\n    batchPoller = pollerService.poll(\r\n      endpoint + '/update/multiple/' + id,\r\n      function (data) {\r\n        var batch = data.batch;\r\n\r\n        // Se il batch ha terminato, oppure se i dati non sono stati completati in 10 minuti\r\n        // Rimuovo il batch dal local storage e smetto di fare il polling\r\n        if (batch) {\r\n          if (batch.total == (batch.completed + batch.failed)) {\r\n            batch = null;\r\n            setLocalBatchData(null);\r\n            $rootScope.$broadcast(BATCH_EVENTS.statusSuccess, { data: batch });\r\n            return;\r\n          }\r\n\r\n          var TTL = 5 * 60 * 1000; // se ci mette troppo tempo lo rimuovo...\r\n          var now = new Date();\r\n          if (now - new Date(batch.createdAt) > TTL) {\r\n            batch = null;\r\n            setLocalBatchData(null);\r\n            $rootScope.$broadcast(BATCH_EVENTS.statusSuccess, { data: batch });\r\n            return;\r\n          }\r\n        }\r\n\r\n        $rootScope.$broadcast(BATCH_EVENTS.statusSuccess, { data: batch });\r\n      },\r\n      function (e) {\r\n        $rootScope.$broadcast(BATCH_EVENTS.statusFailed, { message: e.data.error, description: e.data.description });\r\n        setLocalBatchData(null);\r\n      },\r\n      pollerInterval,\r\n      requestTimeout\r\n    );\r\n\r\n    return batchPoller;\r\n  };\r\n\r\n  function setLocalBatchData(localData) {\r\n    $localStorage['batchData'] = localData;\r\n    checkBatchStatus();\r\n  };\r\n\r\n  function startBatchPoller(id) {\r\n    if (!batchPoller) {\r\n      initBatchPoller(id);\r\n    }\r\n\r\n    batchPoller.start();\r\n    return;\r\n  };\r\n\r\n  function stopBatchPoller() {\r\n    if (!batchPoller) {\r\n      return;\r\n    }\r\n\r\n    batchPoller.stop();\r\n    return;\r\n  };\r\n\r\n  function errorHandler(e, serviceActionName) {\r\n    var newMessage = 'XHR Failed for ' + serviceActionName;\r\n    if (e.data && e.data.error) {\r\n      newMessage = newMessage + '\\n' + e.data.error;\r\n    }\r\n    if (e.data && e.data.description) {\r\n      newMessage = newMessage + '\\n' + e.data.description;\r\n    }\r\n    if (e.data) {\r\n      e.data.detail = newMessage;\r\n    } else {\r\n      e.data = {\r\n        error: \"SERVER_ERROR\",\r\n        description: e.statusText\r\n      };\r\n    }\r\n    $log.error(newMessage);\r\n    return $q.reject(e);\r\n  };\r\n};\r\n","servicesDomain.factory('devicesService', DevicesService);\r\n\r\n/* @ngInject */\r\nfunction DevicesService($rootScope, $log, $http, $q, poller) {\r\n  var endpoint = '/devices';\r\n  var deviceService = {\r\n    createDevice: createDevice,\r\n    deleteDevice: deleteDevice,\r\n    getBulkImportReport: getBulkImportReport,\r\n    getBulkImportReportPoller: getBulkImportReportPoller,\r\n    getDevice: getDevice,\r\n    getDeviceConfig: getDeviceConfig,\r\n    getDeviceLog: getDeviceLog,\r\n    getDeviceStatus: getDeviceStatus,\r\n    getDevices: getDevices,\r\n    getMaintenance: getMaintenance,\r\n    removeMaintenance: removeMaintenance,\r\n    scheduleMaintenance: scheduleMaintenance,\r\n    sendCommand: sendCommand,\r\n    sync: sync,\r\n    updateDevice: updateDevice,\r\n    updateDevices: updateDevices\r\n  };\r\n\r\n  return deviceService;\r\n\r\n  /**\r\n   * FUNCTIONS\r\n   ************************************************/\r\n\r\n  function sync() {\r\n    return $http.get(endpoint + '/sync', { timeout: 10000, cache: false })\r\n      .then(function (response) {\r\n        return response.data;\r\n      })\r\n      .catch(function (e) { return errorHandler(e, 'sync'); });\r\n  };\r\n\r\n  function getDevice(id) {\r\n    return $http.get(endpoint + '/' + id)\r\n      .then(function (response) {\r\n        return response.data;\r\n      })\r\n      .catch(function (e) { return errorHandler(e, 'getDevice'); });\r\n  };\r\n\r\n  function getDevices() {\r\n    return $http.get(endpoint)\r\n      .then(function (response) {\r\n        return response.data;\r\n      })\r\n      .catch(function (e) { return errorHandler(e, 'getDevices'); });\r\n  }\r\n\r\n  function createDevice(payload) {\r\n    return $http.post(endpoint, payload)\r\n      .then(function (response) {\r\n        return response.data;\r\n      })\r\n      .catch(function (e) { return errorHandler(e, 'createDevice'); });\r\n  };\r\n\r\n  function updateDevice(id, payload) {\r\n    return $http.put(endpoint + '/' + id, payload)\r\n      .then(function (response) {\r\n        return response.data;\r\n      })\r\n      .catch(function (e) { return errorHandler(e, 'updateDevice'); });\r\n  };\r\n\r\n  function deleteDevice(id, payload) {\r\n    return $http({\r\n      method: 'DELETE',\r\n      url: endpoint + '/' + id,\r\n      data: payload,\r\n      headers: {\r\n        'Content-type': 'application/json;charset=utf-8'\r\n      }\r\n    }).then(function (response) {\r\n      return response.data;\r\n    })\r\n      .catch(function (e) { return errorHandler(e, 'deleteDevice'); });\r\n  };\r\n\r\n  function getDeviceConfig(address) {\r\n    return $http.get(endpoint + '/config/' + address)\r\n      .then(function (response) {\r\n        return response.data;\r\n      })\r\n      .catch(function (e) { return errorHandler(e, 'getDeviceConfig'); });\r\n  }\r\n\r\n  function getDeviceLog(address) {\r\n    return $http.get(endpoint + '/log/' + address)\r\n      .then(function (response) {\r\n        return response.data;\r\n      })\r\n      .catch(function (e) { return errorHandler(e, 'getDeviceLog'); });\r\n  }\r\n\r\n  function getDeviceStatus(address) {\r\n    return $http.get(endpoint + '/status/' + address)\r\n      .then(function (response) {\r\n        return response.data;\r\n      })\r\n      .catch(function (e) { return errorHandler(e, 'getDeviceStatus'); });\r\n  }\r\n\r\n  function getMaintenance(id) {\r\n    return $http.get('maintenance/' + id)\r\n      .then(function (response) {\r\n        return response.data;\r\n      })\r\n      .catch(function (e) { return errorHandler(e, 'getMaintenance'); });\r\n  };\r\n\r\n  function getBulkImportReport() {\r\n    return $http.get(endpoint + '/import/report')\r\n      .then(function (response) {\r\n        return response.data;\r\n      })\r\n      .catch(function (e) { return errorHandler(e, 'getBulkImportReport'); });\r\n  };\r\n\r\n  function getBulkImportReportPoller() {\r\n    return poller.get(endpoint + '/import/report', {\r\n      delay: 2000,\r\n      catchError: true,\r\n      smart: true,\r\n      argumentsArray: [\r\n        { timeout: 10000, cache: false }\r\n      ]\r\n    });\r\n  };\r\n\r\n  function scheduleMaintenance(id, payload) {\r\n    return $http.post('maintenance/schedule/' + id, payload)\r\n      .then(function (response) {\r\n        return response.data;\r\n      })\r\n      .catch(function (e) { return errorHandler(e, 'scheduleMaintenance'); });\r\n  };\r\n\r\n  function removeMaintenance(id, payload) {\r\n    return $http.post('maintenance/remove/' + id, payload)\r\n      .then(function (response) {\r\n        return response.data;\r\n      })\r\n      .catch(function (e) { return errorHandler(e, 'removeMaintenance'); });\r\n  };\r\n\r\n  function sendCommand(payload) {\r\n    return $http.post('commands/', payload)\r\n      .then(function (response) {\r\n        return response.data;\r\n      })\r\n      .catch(function (e) { return errorHandler(e, 'sendCommand'); });\r\n  };\r\n\r\n  function updateDevices(payload) {\r\n    return $http.post(endpoint + '/update/multiple/', payload)\r\n      .then(function (response) {\r\n        return response.data;\r\n      })\r\n      .catch(function (e) { return errorHandler(e, 'updateDevices'); });\r\n  };\r\n\r\n  function errorHandler(e, serviceActionName) {\r\n    var newMessage = 'XHR Failed for ' + serviceActionName;\r\n    if (e.data && e.data.error) {\r\n      newMessage = newMessage + '\\n' + e.data.error;\r\n    }\r\n    if (e.data && e.data.description) {\r\n      newMessage = newMessage + '\\n' + e.data.description;\r\n    }\r\n    if (e.data) {\r\n      e.data.detail = newMessage;\r\n    } else {\r\n      e.data = {\r\n        error: \"SERVER_ERROR\",\r\n        description: e.statusText\r\n      };\r\n    }\r\n    $log.error(newMessage);\r\n    return $q.reject(e);\r\n  };\r\n\r\n}\r\n","servicesDomain.factory('fileUploadService', fileUploadService);\r\n\r\n/* @ngInject */\r\nfunction fileUploadService($log, $http, $q) {\r\n\r\n  var fileUploadService = {\r\n    upload: upload\r\n  };\r\n\r\n  return fileUploadService;\r\n\r\n  /**\r\n   * FUNCTIONS\r\n   ************************************************/\r\n\r\n\r\n  function errorHandler(e, responseJSON, serviceActionName) {\r\n    var newMessage = 'XHR Failed for ' + serviceActionName;\r\n\r\n    // For upload call\r\n    if (!e.data) {\r\n      e.data = {\r\n        error: responseJSON ? responseJSON.error : \"SERVER_ERROR\",\r\n        description: responseJSON ? responseJSON.description : \"\"\r\n      }\r\n    }\r\n\r\n    if (e.data && e.data.error) {\r\n      newMessage = newMessage + '\\n' + e.data.error;\r\n    }\r\n    if (e.data && e.data.description) {\r\n      newMessage = newMessage + '\\n' + e.data.description;\r\n    }\r\n    if (e.data) {\r\n      e.data.detail = newMessage;\r\n    }\r\n    $log.error(newMessage);\r\n    return e;\r\n  };\r\n\r\n\r\n  function upload(url, files, onProgressCallback, onLoadCallback, onErrorCallback) {\r\n    if (files.length > 0) {\r\n      // create a FormData object which will be sent as the data payload in the\r\n      // AJAX request\r\n      var formData = new FormData();\r\n\r\n      // loop through all the selected files and add them to the formData object\r\n      for (var i = 0; i < files.length; i++) {\r\n        var file = files[i];\r\n\r\n        // add the files to formData object for the data payload\r\n        formData.append('uploads[]', file, file.name);\r\n      }\r\n\r\n      // create an XMLHttpRequest\r\n      var xhr = new XMLHttpRequest();\r\n\r\n      // listen to the 'progress' event\r\n      xhr.upload.onprogress = function (e) {\r\n        if (onProgressCallback && typeof onProgressCallback === 'function') {\r\n          onProgressCallback(e);\r\n        }\r\n      };\r\n\r\n      // listen to the 'load' event\r\n      xhr.onload = function (e) {\r\n\r\n        if (xhr.status != 200) {\r\n          var responseJSON = xhr.responseText ? JSON.parse(xhr.responseText) : null;\r\n          var error = errorHandler(e, responseJSON, 'upload');\r\n          if (onErrorCallback && typeof onErrorCallback === 'function') {\r\n            onErrorCallback(error)\r\n          }\r\n          return false;\r\n        }\r\n\r\n        var response = {\r\n          files: files,\r\n          data: xhr.responseText ? JSON.parse(xhr.responseText) : null\r\n        };\r\n\r\n        if (onLoadCallback && typeof onLoadCallback === 'function') {\r\n          onLoadCallback(response);\r\n        }\r\n      };\r\n\r\n      // listen to the 'error' event\r\n      xhr.upload.onerror = function (e) {\r\n        var responseJSON = xhr.responseText ? JSON.parse(xhr.responseText) : null;\r\n        var error = errorHandler(e, responseJSON, 'upload');\r\n        if (onErrorCallback && typeof onErrorCallback === 'function') {\r\n          onErrorCallback(error)\r\n        }\r\n      };\r\n\r\n      // POST the file\r\n      xhr.open(\"POST\", url);\r\n      xhr.send(formData);\r\n\r\n    }\r\n  }\r\n\r\n};\r\n","servicesDomain.factory('groupsService', groupsService);\r\n\r\n/* @ngInject */\r\nfunction groupsService($log, $http, $q) {\r\n  var endpoint = '/groups';\r\n\r\n  function errorHandler(e, serviceActionName) {\r\n    var newMessage = 'XHR Failed for ' + serviceActionName;\r\n    if (e.data && e.data.error) {\r\n      newMessage = newMessage + '\\n' + e.data.error;\r\n    }\r\n    if (e.data && e.data.description) {\r\n      newMessage = newMessage + '\\n' + e.data.description;\r\n    }\r\n    if (e.data) {\r\n      e.data.detail = newMessage;\r\n    } else {\r\n      e.data = {\r\n        error: \"SERVER_ERROR\",\r\n        description: e.statusText\r\n      };\r\n    }\r\n    $log.error(newMessage);\r\n    return $q.reject(e);\r\n  };\r\n\r\n  return {\r\n    listGroups: function () {\r\n      return $http.get(endpoint)\r\n        .then(function (response) { return response.data; })\r\n        .catch(function (e) { return errorHandler(e, 'listGroups'); });\r\n    },\r\n    getGroup: function (groupId) {\r\n      return $http.get(endpoint + '/' + groupId)\r\n        .then(function (response) { return response.data; })\r\n        .catch(function (e) { return errorHandler(e, 'getGroup'); });\r\n\r\n    },\r\n    createGroup: function (payload) {\r\n      return $http.post(endpoint, payload)\r\n        .then(function (response) { return response.data; })\r\n        .catch(function (e) { return errorHandler(e, 'createGroup'); });\r\n    },\r\n    updateGroup: function (requestBody) {\r\n      return $http.put(endpoint, requestBody)\r\n        .then(function (response) { return response.data; })\r\n        .catch(function (e) { return errorHandler(e, 'updateGroup'); })\r\n    },\r\n    deleteGroups: function (groupsIds) {\r\n      return $http({\r\n        method: 'DELETE',\r\n        url: endpoint,\r\n        data: {\r\n          \"groupIds\": groupsIds\r\n        },\r\n        headers: {\r\n          'Content-Type': 'application/json;charset=utf-8'\r\n        }\r\n      })\r\n        .then(function (response) {\r\n          return response.data;\r\n        })\r\n        .catch(function (e) {\r\n          return errorHandler(e, 'deleteGroups');\r\n        });\r\n    }\r\n  }\r\n}\r\n","servicesDomain.factory('dataHttpInterceptor', dataHttpInterceptor);\r\n\r\n/* @ngInject */\r\nfunction dataHttpInterceptor($rootScope, $q, $log, AUTH_EVENTS, APPLICATION_EVENTS) {\r\n  return {\r\n    request: function (config) {\r\n\r\n      $rootScope.$broadcast(APPLICATION_EVENTS.appLoading, { loading: true });\r\n\r\n      // Disable caching for MSIE (from version 6 to 11)\r\n      if ($rootScope.isIE11) {\r\n        //initialize get if not there\r\n        if (!config.headers) {\r\n          config.headers = {};\r\n        }\r\n\r\n        //disable IE ajax request caching\r\n        // config.headers['If-Modified-Since'] = 'Mon, 26 Jul 1997 05:00:00 GMT'; // Questo sembra dare problemi in alcuni casi con alcuni webserver...\r\n        config.headers['Cache-Control'] = 'no-cache';\r\n        config.headers['Pragma'] = 'no-cache';\r\n      }\r\n\r\n      return config;\r\n    },\r\n\r\n    requestError: function (rejection) {\r\n\r\n      $rootScope.$broadcast(APPLICATION_EVENTS.appLoading, { loading: false });\r\n\r\n      if (canRecover(rejection)) {\r\n        return responseOrNewPromise\r\n      }\r\n      return $q.reject(rejection);\r\n    },\r\n\r\n    response: function (response) {\r\n\r\n      $rootScope.$broadcast(APPLICATION_EVENTS.appLoading, { loading: false });\r\n\r\n      return response;\r\n    },\r\n\r\n    responseError: function (response) {\r\n\r\n      $rootScope.$broadcast(APPLICATION_EVENTS.appLoading, { loading: false });\r\n\r\n      $rootScope.$broadcast({\r\n        401: AUTH_EVENTS.notAuthenticated,\r\n        403: AUTH_EVENTS.notAuthorized,\r\n      }[response.status], response);\r\n      return $q.reject(response);\r\n    }\r\n  };\r\n}\r\n","servicesDomain.factory('kibanaService', kibanaService);\r\n\r\n/* @ngInject */\r\nfunction kibanaService($log, $http, $q) {\r\n\r\n  var endpoint = '/kibana';\r\n\r\n  function errorHandler(e, serviceActionName) {\r\n    var newMessage = 'XHR Failed for ' + serviceActionName;\r\n    if (e.data && e.data.error) {\r\n      newMessage = newMessage + '\\n' + e.data.error;\r\n    }\r\n    if (e.data && e.data.description) {\r\n      newMessage = newMessage + '\\n' + e.data.description;\r\n    }\r\n    if (e.data) {\r\n      e.data.detail = newMessage;\r\n    } else {\r\n      e.data = {\r\n        error: \"SERVER_ERROR\",\r\n        description: e.statusText\r\n      };\r\n    }\r\n    $log.error(newMessage);\r\n    return $q.reject(e);\r\n  };\r\n\r\n  return {\r\n    listDashboards: function() {\r\n      var apiURL = endpoint + '/dashboards';\r\n      return $http.get(apiURL)\r\n        .then(function (response) { return response.data; })\r\n        .catch(function (e) { return errorHandler(e, 'getDashboards'); });\r\n    },\r\n    getDashboardUrl: function (dashboardId, deviceId) {\r\n      var apiURL = endpoint + '/' + dashboardId;\r\n      if (typeof deviceId != 'undefined') {\r\n        apiURL += '/' + deviceId;\r\n      }\r\n      return $http.get(apiURL)\r\n        .then(function (response) { return response.data; })\r\n        .catch(function (e) { return errorHandler(e, 'getDashboardUrl'); });\r\n    },\r\n    filterChart: function (dashboardId, payload, deviceId) {\r\n      var apiURL = endpoint + '/' + dashboardId;\r\n      if (typeof deviceId != 'undefined') {\r\n        apiURL += '/' + deviceId;\r\n      }\r\n      return $http.post(apiURL, payload)\r\n        .then(function (response) { return response.data; })\r\n        .catch(function (e) { return errorHandler(e, 'getDashboardUrl'); });\r\n    }\r\n  }\r\n}\r\n","servicesDomain.factory('leafletService', leafletService);\r\n\r\nfunction leafletService($q) {\r\n  var deferredMap = {\r\n    'map': []\r\n  };\r\n  var leafletService = {\r\n    setMap: setMap,\r\n    getMap: getMap\r\n  };\r\n  return leafletService;\r\n\r\n  /**\r\n   * FUNCTIONS\r\n   ************************************************/\r\n\r\n  function _createDeferred(type, scopeId) {\r\n    var deferredList = deferredMap[type];\r\n    deferredList[scopeId] = $q.defer();\r\n    return deferredList[scopeId];\r\n  };\r\n\r\n  function _getDeferred(type, scopeId) {\r\n    var deferredList = deferredMap[type];\r\n    if (!deferredList[scopeId]) {\r\n      return _createDeferred(type, scopeId);\r\n    }\r\n    return deferredList[scopeId];\r\n  };\r\n\r\n  function getMap(scopeId) {\r\n    var deferred = _getDeferred('map', scopeId);\r\n    return deferred.promise;\r\n  };\r\n\r\n  function setMap(map, scopeId) {\r\n    var deferred = _createDeferred('map', scopeId);\r\n    deferred.resolve(map)\r\n  };\r\n}\r\n","servicesDomain.factory('pollerService', PollerService);\r\n\r\n/* @ngInject */\r\nfunction PollerService($rootScope, $log, $http, $interval) {\r\n  var pollerService = {\r\n    poll: poll\r\n  };\r\n\r\n  return pollerService;\r\n\r\n  /**\r\n   * FUNCTIONS\r\n   ************************************************/\r\n\r\n  function poll(url, successCallback, errorCallback, pollerInterval, requestTimeout) {\r\n\r\n    var Poller = function (options) {\r\n      this.interval = null;\r\n      this.isRequestPendeing = false;\r\n      this.pollerInterval = options.pollerInterval || 30000;\r\n      this.requestTimeout = options.requestTimeout || 20000;\r\n\r\n      this.setOptions(options);\r\n    };\r\n\r\n    Poller.prototype.setOptions = function (options) {\r\n      this.url = options.url;\r\n\r\n      if (options.pollerInterval != null) {\r\n        this.pollerInterval = options.pollerInterval;\r\n      }\r\n\r\n      if (options.requestTimeout != null) {\r\n        this.requestTimeout = options.requestTimeout;\r\n      }\r\n\r\n      this.successCallback = options.successCallback;\r\n      this.errorCallback = options.errorCallback;\r\n    };\r\n\r\n    Poller.prototype.start = function () {\r\n      if (!this.interval) {\r\n        this.execute();\r\n        this.interval = $interval(\r\n\r\n          (function (self) {       //Self-executing func which takes 'this' as self\r\n            return function () {   //Return a function in the context of 'self'\r\n              self.execute();    //Thing you wanted to run as non-window 'this'\r\n            }\r\n          })(this),\r\n\r\n          this.pollerInterval);\r\n      }\r\n    };\r\n\r\n    Poller.prototype.execute = function () {\r\n\r\n      if (this.isRequestPendeing) {\r\n        return;\r\n      }\r\n\r\n      this.isRequestPendeing = true;\r\n      var self = this;\r\n      $http\r\n        .get(self.url, { timeout: self.requestTimeout, cache: false })\r\n        .then(function (response) {\r\n          self.isRequestPendeing = false;\r\n          if (self.successCallback && angular.isFunction(self.successCallback)) {\r\n            self.successCallback(response.data);\r\n          }\r\n        })\r\n        .catch(function (e) {\r\n          self.isRequestPendeing = false;\r\n          var error = errorHandler(e);\r\n\r\n          if (self.errorCallback && angular.isFunction(self.errorCallback)) {\r\n            self.errorCallback(error);\r\n          }\r\n        });\r\n    };\r\n\r\n    Poller.prototype.stop = function () {\r\n      if (this.interval) {\r\n        $interval.cancel(this.interval);\r\n        this.interval = null;\r\n      }\r\n\r\n      this.isRequestPendeing = false;\r\n    };\r\n\r\n    Poller.prototype.restart = function () {\r\n      this.stop();\r\n      this.start();\r\n    };\r\n\r\n    var poller = new Poller({ url: url, successCallback: successCallback, errorCallback: errorCallback, pollerInterval: pollerInterval, requestTimeout: requestTimeout });\r\n    poller.start();\r\n    return poller;\r\n  };\r\n\r\n  function errorHandler(e) {\r\n    var newMessage = 'XHR Failed';\r\n    if (e.data && e.data.error) {\r\n      newMessage = newMessage + '\\n' + e.data.error;\r\n    }\r\n    if (e.data && e.data.description) {\r\n      newMessage = newMessage + '\\n' + e.data.description;\r\n    }\r\n    if (e.data) {\r\n      e.data.detail = newMessage;\r\n    } else {\r\n      e.data = {\r\n        error: \"SERVER_ERROR\",\r\n        description: e.statusText\r\n      };\r\n    }\r\n    $log.error(newMessage);\r\n\r\n    return e;\r\n  };\r\n\r\n}\r\n","servicesDomain.factory('stationsService', StationsService);\r\n\r\n/* @ngInject */\r\nfunction StationsService($rootScope, $log, $http, $interval, $q) {\r\n  var endpoint = '/stations';\r\n  var stationsService = {\r\n    createStation: createStation,\r\n    deleteStation: deleteStation,\r\n    readStation: readStation,\r\n    listStations: listStations,\r\n    updateStation: updateStation\r\n  };\r\n\r\n  return stationsService;\r\n\r\n  /**\r\n   * FUNCTIONS\r\n   ************************************************/\r\n\r\n  function createStation(payload) {\r\n    return $http.post(endpoint, payload)\r\n      .then(function (response) {\r\n        return response.data;\r\n      })\r\n      .catch(function (e) { return errorHandler(e, 'createStation'); });\r\n  }\r\n\r\n  function deleteStation(id, payload) {\r\n    return $http({\r\n      method: 'DELETE',\r\n      url: endpoint + '/' + id,\r\n      data: payload,\r\n      headers: {\r\n        'Content-type': 'application/json;charset=utf-8'\r\n      }\r\n    })\r\n      .then(function (response) {\r\n        return response.data;\r\n      })\r\n      .catch(function (e) { return errorHandler(e, 'deleteStation'); });\r\n  }\r\n\r\n  function readStation(id) {\r\n    return $http.get(endpoint + '/' + id)\r\n      .then(function (response) {\r\n        return response.data;\r\n      })\r\n      .catch(function (e) { return errorHandler(e, 'readStation'); });\r\n  }\r\n\r\n  function listStations() {\r\n    return $http.get(endpoint + '/')\r\n      .then(function (response) {\r\n        return response.data;\r\n      })\r\n      .catch(function (e) { return errorHandler(e, 'listStations'); });\r\n  }\r\n\r\n  function updateStation(id, payload) {\r\n    return $http.put(endpoint + '/' + id, payload)\r\n      .then(function (response) {\r\n        return response.data;\r\n      })\r\n      .catch(function (e) { return errorHandler(e, 'updateStation'); });\r\n  }\r\n\r\n  function errorHandler(e, serviceActionName) {\r\n    var newMessage = 'XHR Failed for ' + serviceActionName;\r\n    if (e.data && e.data.error) {\r\n      newMessage = newMessage + '\\n' + e.data.error;\r\n    }\r\n    if (e.data && e.data.description) {\r\n      newMessage = newMessage + '\\n' + e.data.description;\r\n    }\r\n    if (e.data) {\r\n      e.data.detail = newMessage;\r\n    } else {\r\n      e.data = {\r\n        error: \"SERVER_ERROR\",\r\n        description: e.statusText\r\n      };\r\n    }\r\n    $log.error(newMessage);\r\n    return $q.reject(e);\r\n  };\r\n\r\n};\r\n","servicesDomain.factory('syncService', SyncService);\r\n\r\nvar cachedSyncData = null;\r\nvar cacheDate = null;\r\n\r\nvar syncPoller = null;\r\n\r\n/* @ngInject */\r\nfunction SyncService($rootScope, $log, $http, $q, pollerService, SYNC_EVENTS) {\r\n  var endpoint = '/devices';\r\n  var syncService = {\r\n    getCachedSyncData: getCachedSyncData,\r\n    getSyncData: getSyncData,\r\n    isSyncPollerRunning: isSyncPollerRunning,\r\n    restartSyncPoller: restartSyncPoller,\r\n    startSyncPoller: startSyncPoller,\r\n    stopSyncPoller: stopSyncPoller,\r\n    updateDeviceCachedData: updateDeviceCachedData,\r\n    updateStationCachedData: updateStationCachedData\r\n  };\r\n\r\n  return syncService;\r\n\r\n  function getCachedSyncData() {\r\n    if (cachedSyncData) {\r\n      return $q.when(cachedSyncData);\r\n    } else {\r\n      return getSyncData();\r\n    }\r\n  }\r\n\r\n  function getSyncData() {\r\n    return $http.get(endpoint + '/sync', { timeout: 10000, cache: false })\r\n      .then(function (response) {\r\n        setCachedSyncData(response.data)\r\n        return response.data;\r\n      })\r\n      .catch(function (e) { return errorHandler(e, 'getSyncData'); });\r\n  };\r\n\r\n  function initSyncPoller() {\r\n    if (syncPoller) {\r\n      return;\r\n    }\r\n\r\n    syncPoller = pollerService.poll(\r\n      endpoint + '/sync',\r\n      function (data) {\r\n        setCachedSyncData(data);\r\n      },\r\n      function (e) {\r\n        $rootScope.$broadcast(SYNC_EVENTS.syncFailed, { message: e.data.error, description: e.data.description });\r\n      });\r\n\r\n    return syncPoller;\r\n  };\r\n\r\n  function isSyncPollerRunning() {\r\n    return syncPoller && syncPoller.interval != null;\r\n  };\r\n\r\n  function restartSyncPoller() {\r\n    if (!syncPoller) {\r\n      return;\r\n    }\r\n\r\n    syncPoller.restart();\r\n    return;\r\n  };\r\n\r\n  function setCachedSyncData(syncData) {\r\n    var lastUpdateDate = syncData && syncData.summary ? syncData.summary.lastUpdate : null;\r\n    if (cacheDate !== null && lastUpdateDate !== null && lastUpdateDate <= cacheDate) {\r\n      return;\r\n    }\r\n\r\n    $rootScope.$broadcast(SYNC_EVENTS.syncSuccess, { data: syncData });\r\n    cachedSyncData = syncData;\r\n    cacheDate = new Date();\r\n  };\r\n\r\n  function startSyncPoller() {\r\n    if (!syncPoller) {\r\n      initSyncPoller();\r\n    }\r\n\r\n    syncPoller.start();\r\n    return;\r\n  };\r\n\r\n  function stopSyncPoller() {\r\n    if (!syncPoller) {\r\n      return;\r\n    }\r\n\r\n    syncPoller.stop();\r\n    return;\r\n  };\r\n\r\n  function updateDeviceCachedData(data) {\r\n    if (!data) {\r\n      return;\r\n    }\r\n\r\n    var lastUpdateDate = cachedSyncData || cachedSyncData.summary ? cachedSyncData.summary.lastUpdate : null;\r\n    if (cacheDate == null || lastUpdateDate == null || lastUpdateDate > cacheDate) {\r\n      return;\r\n    }\r\n\r\n    for (var i = 0; i < cachedSyncData.devices.length; i++) {\r\n      var device = cachedSyncData.devices[i];\r\n      if (device) {\r\n        angular.extend(device, data);\r\n        break;\r\n      }\r\n    }\r\n\r\n    //TODO: si potrebbe pensare di eliminare questo oggetto\r\n    var stationTree = cachedSyncData.stationsTree[data.config.stationName];\r\n    if (stationTree) {\r\n      var deviceTree = stationTree['devices'][data.name];\r\n      if (deviceTree) {\r\n        angular.extend(deviceTree, data);\r\n      }\r\n    }\r\n\r\n    setCachedSyncData(cachedSyncData);\r\n  };\r\n\r\n  function updateStationCachedData(data) {\r\n    if (!data) {\r\n      return;\r\n    }\r\n\r\n    var lastUpdateDate = cachedSyncData || cachedSyncData.summary ? cachedSyncData.summary.lastUpdate : null;\r\n    if (cacheDate == null || lastUpdateDate == null || lastUpdateDate > cacheDate) {\r\n      return;\r\n    }\r\n\r\n    for (var i = 0; i < cachedSyncData.stations.length; i++) {\r\n      var station = cachedSyncData.stations[i];\r\n      if (station) {\r\n        angular.extend(station, data);\r\n        break;\r\n      }\r\n    }\r\n\r\n    //TODO: si potrebbe pensare di eliminare questo oggetto\r\n    var stationTree = cachedSyncData.stationsTree[data.name];\r\n    if (stationTree) {\r\n      angular.extend(stationTree, data);\r\n    }\r\n\r\n    setCachedSyncData(cachedSyncData);\r\n  };\r\n\r\n  function errorHandler(e, serviceActionName) {\r\n    var newMessage = 'XHR Failed for ' + serviceActionName;\r\n    if (e.data && e.data.error) {\r\n      newMessage = newMessage + '\\n' + e.data.error;\r\n    }\r\n    if (e.data && e.data.description) {\r\n      newMessage = newMessage + '\\n' + e.data.description;\r\n    }\r\n    if (e.data) {\r\n      e.data.detail = newMessage;\r\n    } else {\r\n      e.data = {\r\n        error: \"SERVER_ERROR\",\r\n        description: e.statusText\r\n      };\r\n    }\r\n    $log.error(newMessage);\r\n    return $q.reject(e);\r\n  };\r\n}\r\n","servicesDomain.factory('ticketsService', ticketsService);\r\n\r\n/* @ngInject */\r\nfunction ticketsService($log, $http, $q) {\r\n\r\n  var endpoint = '/tickets';\r\n\r\n  function errorHandler(e, serviceActionName) {\r\n    var newMessage = 'XHR Failed for ' + serviceActionName;\r\n    if (e.data && e.data.error) {\r\n      newMessage = newMessage + '\\n' + e.data.error;\r\n    }\r\n    if (e.data && e.data.description) {\r\n      newMessage = newMessage + '\\n' + e.data.description;\r\n    }\r\n    if (e.data) {\r\n      e.data.detail = newMessage;\r\n    } else {\r\n      e.data = {\r\n        error: \"SERVER_ERROR\",\r\n        description: e.statusText\r\n      };\r\n    }\r\n    $log.error(newMessage);\r\n    return $q.reject(e);\r\n  };\r\n\r\n  return {\r\n    createTicket: function (payload) {\r\n      return $http.post(endpoint, payload)\r\n        .then(function (response) { return response.data; })\r\n        .catch(function (e) { return errorHandler(e, 'createTicket'); });\r\n    },\r\n    getTickets: function (deviceId) {\r\n      return $http.get(endpoint + '/' + deviceId)\r\n        .then(function (response) { return response.data; })\r\n        .catch(function (e) { return errorHandler(e, 'getTickets'); });\r\n    },\r\n    getTicket: function (deviceId, ticketId) {\r\n      return $http.get(endpoint + '/' + ticketId)\r\n        .then(function (response) { return response.data; })\r\n        .catch(function (e) { return errorHandler(e, 'getTicket'); });\r\n    },\r\n    updateTicket: function (requestBody) {\r\n      return $http.put(endpoint, requestBody)\r\n        .then(function (response) { return response.data; })\r\n        .catch(function (e) { return errorHandler(e, 'updateTicket'); })\r\n    },\r\n    deleteTicket: function (ticketIds) {\r\n      return $http({\r\n        method: 'DELETE',\r\n        url: endpoint,\r\n        data: {\r\n          \"userIds\": ticketIds\r\n        },\r\n        headers: {\r\n          'Content-Type': 'application/json;charset=utf-8'\r\n        }\r\n      })\r\n        .then(function (response) { return response.data; })\r\n        .catch(function (e) { return errorHandler(e, 'deleteTickets'); });\r\n    }\r\n  }\r\n\r\n}\r\n","servicesDomain.factory('usersService', usersService);\r\n\r\n/* @ngInject */\r\nfunction usersService($log, $http, $q) {\r\n  var endpoint = '/users';\r\n\r\n  function errorHandler(e, serviceActionName) {\r\n    var newMessage = 'XHR Failed for ' + serviceActionName;\r\n    if (e.data && e.data.error) {\r\n      newMessage = newMessage + '\\n' + e.data.error;\r\n    }\r\n    if (e.data && e.data.description) {\r\n      newMessage = newMessage + '\\n' + e.data.description;\r\n    }\r\n    if (e.data) {\r\n      e.data.detail = newMessage;\r\n    } else {\r\n      e.data = {\r\n        error: \"SERVER_ERROR\",\r\n        description: e.statusText\r\n      };\r\n    }\r\n    $log.error(newMessage);\r\n    return $q.reject(e);\r\n  };\r\n\r\n  return {\r\n    createUser: function (payload) {\r\n      return $http.post(endpoint, payload)\r\n        .then(function (response) { return response.data; })\r\n        .catch(function (e) { return errorHandler(e, 'createUser'); });\r\n    },\r\n    listUsers: function () {\r\n      return $http.get(endpoint)\r\n        .then(function (response) { return response.data; })\r\n        .catch(function (e) { return errorHandler(e, 'listUsers'); });\r\n    },\r\n    getUser: function (userId) {\r\n      return $http.get(endpoint + '/' + userId)\r\n        .then(function (response) { return response.data; })\r\n        .catch(function (e) { return errorHandler(e, 'getUser'); });\r\n    },\r\n    updateUser: function (requestBody) {\r\n      return $http.put(endpoint, requestBody)\r\n        .then(function (response) { return response.data; })\r\n        .catch(function (e) { return errorHandler(e, 'updateUser'); })\r\n    },\r\n    deleteUsers: function (usersIds) {\r\n      return $http({\r\n        method: 'DELETE',\r\n        url: endpoint,\r\n        data: { 'userIds': usersIds },\r\n        headers: { 'Content-Type': 'application/json;charset=utf-8' }\r\n      })\r\n        .then(function (response) { return response.data; })\r\n        .catch(function (e) { return errorHandler(e, 'deleteUsers'); });\r\n    }\r\n  }\r\n}\r\n","var servicesDomain = angular.module('SolariMonitor.services', []);","servicesDomain.config(function ($httpProvider) {\r\n  $httpProvider.useApplyAsync(true);\r\n  $httpProvider.interceptors.push('dataHttpInterceptor');\r\n});\r\n"]}